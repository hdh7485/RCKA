
SOCCER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800100  00001ba6  00001c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ba6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a7  0080023c  0080023c  00001d76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001da8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a5a  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000035d  00000000  00000000  0000399a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013e9  00000000  00000000  00003cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000484  00000000  00000000  000050e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007eda  00000000  00000000  00005564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001807  00000000  00000000  0000d43e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000ec45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002cec  00000000  00000000  0000edd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	82 c0       	rjmp	.+260    	; 0x106 <__ctors_end>
       2:	00 00       	nop
       4:	9f c0       	rjmp	.+318    	; 0x144 <__bad_interrupt>
       6:	00 00       	nop
       8:	9d c0       	rjmp	.+314    	; 0x144 <__bad_interrupt>
       a:	00 00       	nop
       c:	9b c0       	rjmp	.+310    	; 0x144 <__bad_interrupt>
       e:	00 00       	nop
      10:	99 c0       	rjmp	.+306    	; 0x144 <__bad_interrupt>
      12:	00 00       	nop
      14:	97 c0       	rjmp	.+302    	; 0x144 <__bad_interrupt>
      16:	00 00       	nop
      18:	95 c0       	rjmp	.+298    	; 0x144 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	93 c0       	rjmp	.+294    	; 0x144 <__bad_interrupt>
      1e:	00 00       	nop
      20:	91 c0       	rjmp	.+290    	; 0x144 <__bad_interrupt>
      22:	00 00       	nop
      24:	8f c0       	rjmp	.+286    	; 0x144 <__bad_interrupt>
      26:	00 00       	nop
      28:	8d c0       	rjmp	.+282    	; 0x144 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8b c0       	rjmp	.+278    	; 0x144 <__bad_interrupt>
      2e:	00 00       	nop
      30:	89 c0       	rjmp	.+274    	; 0x144 <__bad_interrupt>
      32:	00 00       	nop
      34:	87 c0       	rjmp	.+270    	; 0x144 <__bad_interrupt>
      36:	00 00       	nop
      38:	85 c0       	rjmp	.+266    	; 0x144 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	83 c0       	rjmp	.+262    	; 0x144 <__bad_interrupt>
      3e:	00 00       	nop
      40:	81 c0       	rjmp	.+258    	; 0x144 <__bad_interrupt>
      42:	00 00       	nop
      44:	7f c0       	rjmp	.+254    	; 0x144 <__bad_interrupt>
      46:	00 00       	nop
      48:	dc c0       	rjmp	.+440    	; 0x202 <__vector_18>
      4a:	00 00       	nop
      4c:	7b c0       	rjmp	.+246    	; 0x144 <__bad_interrupt>
      4e:	00 00       	nop
      50:	79 c0       	rjmp	.+242    	; 0x144 <__bad_interrupt>
      52:	00 00       	nop
      54:	77 c0       	rjmp	.+238    	; 0x144 <__bad_interrupt>
      56:	00 00       	nop
      58:	75 c0       	rjmp	.+234    	; 0x144 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	73 c0       	rjmp	.+230    	; 0x144 <__bad_interrupt>
      5e:	00 00       	nop
      60:	71 c0       	rjmp	.+226    	; 0x144 <__bad_interrupt>
      62:	00 00       	nop
      64:	6f c0       	rjmp	.+222    	; 0x144 <__bad_interrupt>
      66:	00 00       	nop
      68:	6d c0       	rjmp	.+218    	; 0x144 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6b c0       	rjmp	.+214    	; 0x144 <__bad_interrupt>
      6e:	00 00       	nop
      70:	69 c0       	rjmp	.+210    	; 0x144 <__bad_interrupt>
      72:	00 00       	nop
      74:	67 c0       	rjmp	.+206    	; 0x144 <__bad_interrupt>
      76:	00 00       	nop
      78:	65 c0       	rjmp	.+202    	; 0x144 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	63 c0       	rjmp	.+198    	; 0x144 <__bad_interrupt>
      7e:	00 00       	nop
      80:	61 c0       	rjmp	.+194    	; 0x144 <__bad_interrupt>
      82:	00 00       	nop
      84:	5f c0       	rjmp	.+190    	; 0x144 <__bad_interrupt>
      86:	00 00       	nop
      88:	5d c0       	rjmp	.+186    	; 0x144 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	72 07       	cpc	r23, r18
      8e:	7b 07       	cpc	r23, r27
      90:	88 07       	cpc	r24, r24
      92:	90 07       	cpc	r25, r16
      94:	9c 07       	cpc	r25, r28
      96:	a4 07       	cpc	r26, r20
      98:	b1 07       	cpc	r27, r17
      9a:	ba 07       	cpc	r27, r26
      9c:	c6 07       	cpc	r28, r22
      9e:	cf 07       	cpc	r28, r31
      a0:	dc 07       	cpc	r29, r28
      a2:	e5 07       	cpc	r30, r21
      a4:	fa 07       	cpc	r31, r26
      a6:	08 08       	sbc	r0, r8
      a8:	0c 08       	sbc	r0, r12
      aa:	10 08       	sbc	r1, r0
      ac:	14 08       	sbc	r1, r4
      ae:	18 08       	sbc	r1, r8
      b0:	1c 08       	sbc	r1, r12
      b2:	20 08       	sbc	r2, r0
      b4:	24 08       	sbc	r2, r4
      b6:	28 08       	sbc	r2, r8
      b8:	2c 08       	sbc	r2, r12
      ba:	30 08       	sbc	r3, r0
      bc:	41 09       	sbc	r20, r1
      be:	46 09       	sbc	r20, r6
      c0:	4b 09       	sbc	r20, r11
      c2:	50 09       	sbc	r21, r0
      c4:	55 09       	sbc	r21, r5
      c6:	5a 09       	sbc	r21, r10
      c8:	5f 09       	sbc	r21, r15
      ca:	fe 0a       	sbc	r15, r30
      cc:	ff 0a       	sbc	r15, r31
      ce:	00 0b       	sbc	r16, r16
      d0:	02 0b       	sbc	r16, r18
      d2:	04 0b       	sbc	r16, r20
      d4:	06 0b       	sbc	r16, r22
      d6:	08 0b       	sbc	r16, r24
      d8:	08 4a       	sbci	r16, 0xA8	; 168
      da:	d7 3b       	cpi	r29, 0xB7	; 183
      dc:	3b ce       	rjmp	.-906    	; 0xfffffd54 <__eeprom_end+0xff7efd54>
      de:	01 6e       	ori	r16, 0xE1	; 225
      e0:	84 bc       	out	0x24, r8	; 36
      e2:	bf fd       	.word	0xfdbf	; ????
      e4:	c1 2f       	mov	r28, r17
      e6:	3d 6c       	ori	r19, 0xCD	; 205
      e8:	74 31       	cpi	r23, 0x14	; 20
      ea:	9a bd       	out	0x2a, r25	; 42
      ec:	56 83       	std	Z+6, r21	; 0x06
      ee:	3d da       	rcall	.-2950   	; 0xfffff56a <__eeprom_end+0xff7ef56a>
      f0:	3d 00       	.word	0x003d	; ????
      f2:	c7 7f       	andi	r28, 0xF7	; 247
      f4:	11 be       	out	0x31, r1	; 49
      f6:	d9 e4       	ldi	r29, 0x49	; 73
      f8:	bb 4c       	sbci	r27, 0xCB	; 203
      fa:	3e 91       	ld	r19, -X
      fc:	6b aa       	std	Y+51, r6	; 0x33
      fe:	aa be       	out	0x3a, r10	; 58
     100:	00 00       	nop
     102:	00 80       	ld	r0, Z
     104:	3f 00       	.word	0x003f	; ????

00000106 <__ctors_end>:
     106:	11 24       	eor	r1, r1
     108:	1f be       	out	0x3f, r1	; 63
     10a:	cf ef       	ldi	r28, 0xFF	; 255
     10c:	d0 e4       	ldi	r29, 0x40	; 64
     10e:	de bf       	out	0x3e, r29	; 62
     110:	cd bf       	out	0x3d, r28	; 61

00000112 <__do_copy_data>:
     112:	12 e0       	ldi	r17, 0x02	; 2
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	e6 ea       	ldi	r30, 0xA6	; 166
     11a:	fb e1       	ldi	r31, 0x1B	; 27
     11c:	00 e0       	ldi	r16, 0x00	; 0
     11e:	0b bf       	out	0x3b, r16	; 59
     120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x14>
     122:	07 90       	elpm	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	ac 33       	cpi	r26, 0x3C	; 60
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0x10>

0000012c <__do_clear_bss>:
     12c:	22 e0       	ldi	r18, 0x02	; 2
     12e:	ac e3       	ldi	r26, 0x3C	; 60
     130:	b2 e0       	ldi	r27, 0x02	; 2
     132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
     134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
     136:	a3 3e       	cpi	r26, 0xE3	; 227
     138:	b2 07       	cpc	r27, r18
     13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
     13c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <main>
     140:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <_exit>

00000144 <__bad_interrupt>:
     144:	5d cf       	rjmp	.-326    	; 0x0 <__vectors>

00000146 <delay20us>:

void Lcd_Move(char line, char pos)
{
	pos=(line<<6)+pos;
	pos |= 0x80;
	Lcd_Cmd(pos);
     146:	90 93 44 02 	sts	0x0244, r25
     14a:	80 93 43 02 	sts	0x0243, r24
     14e:	80 91 43 02 	lds	r24, 0x0243
     152:	90 91 44 02 	lds	r25, 0x0244
     156:	18 16       	cp	r1, r24
     158:	19 06       	cpc	r1, r25
     15a:	cc f3       	brlt	.-14     	; 0x14e <delay20us+0x8>
     15c:	08 95       	ret

0000015e <Lcd_Data>:
     15e:	cf 93       	push	r28
     160:	c8 2f       	mov	r28, r24
     162:	83 e0       	ldi	r24, 0x03	; 3
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	ef df       	rcall	.-34     	; 0x146 <delay20us>
     168:	8c 2f       	mov	r24, r28
     16a:	80 7f       	andi	r24, 0xF0	; 240
     16c:	89 60       	ori	r24, 0x09	; 9
     16e:	85 b9       	out	0x05, r24	; 5
     170:	2b 98       	cbi	0x05, 3	; 5
     172:	20 e1       	ldi	r18, 0x10	; 16
     174:	c2 02       	muls	r28, r18
     176:	c0 01       	movw	r24, r0
     178:	11 24       	eor	r1, r1
     17a:	89 60       	ori	r24, 0x09	; 9
     17c:	85 b9       	out	0x05, r24	; 5
     17e:	2b 98       	cbi	0x05, 3	; 5
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <delay1ms>:
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	ec 01       	movw	r28, r24
     18a:	18 16       	cp	r1, r24
     18c:	19 06       	cpc	r1, r25
     18e:	2c f4       	brge	.+10     	; 0x19a <delay1ms+0x16>
     190:	82 e3       	ldi	r24, 0x32	; 50
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	d8 df       	rcall	.-80     	; 0x146 <delay20us>
     196:	21 97       	sbiw	r28, 0x01	; 1
     198:	d9 f7       	brne	.-10     	; 0x190 <delay1ms+0xc>
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	08 95       	ret

000001a0 <port_init>:
     1a0:	80 ef       	ldi	r24, 0xF0	; 240
     1a2:	82 b9       	out	0x02, r24	; 2
     1a4:	8f e0       	ldi	r24, 0x0F	; 15
     1a6:	81 b9       	out	0x01, r24	; 1
     1a8:	8f ef       	ldi	r24, 0xFF	; 255
     1aa:	85 b9       	out	0x05, r24	; 5
     1ac:	9b ef       	ldi	r25, 0xFB	; 251
     1ae:	94 b9       	out	0x04, r25	; 4
     1b0:	9c e1       	ldi	r25, 0x1C	; 28
     1b2:	98 b9       	out	0x08, r25	; 8
     1b4:	93 ee       	ldi	r25, 0xE3	; 227
     1b6:	97 b9       	out	0x07, r25	; 7
     1b8:	9f e7       	ldi	r25, 0x7F	; 127
     1ba:	9b b9       	out	0x0b, r25	; 11
     1bc:	8a b9       	out	0x0a, r24	; 10
     1be:	08 95       	ret

000001c0 <timer_init>:
     1c0:	82 e0       	ldi	r24, 0x02	; 2
     1c2:	85 bd       	out	0x25, r24	; 37
     1c4:	81 ef       	ldi	r24, 0xF1	; 241
     1c6:	80 93 80 00 	sts	0x0080, r24
     1ca:	83 e0       	ldi	r24, 0x03	; 3
     1cc:	80 93 81 00 	sts	0x0081, r24
     1d0:	81 e3       	ldi	r24, 0x31	; 49
     1d2:	80 93 b0 00 	sts	0x00B0, r24
     1d6:	84 e0       	ldi	r24, 0x04	; 4
     1d8:	80 93 b1 00 	sts	0x00B1, r24
     1dc:	10 92 89 00 	sts	0x0089, r1
     1e0:	10 92 88 00 	sts	0x0088, r1
     1e4:	10 92 8b 00 	sts	0x008B, r1
     1e8:	10 92 8a 00 	sts	0x008A, r1
     1ec:	10 92 b4 00 	sts	0x00B4, r1
     1f0:	8e ec       	ldi	r24, 0xCE	; 206
     1f2:	86 bd       	out	0x26, r24	; 38
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	80 93 6e 00 	sts	0x006E, r24
     1fa:	81 e1       	ldi	r24, 0x11	; 17
     1fc:	80 93 b8 00 	sts	0x00B8, r24
     200:	08 95       	ret

00000202 <__vector_18>:
     202:	1f 92       	push	r1
     204:	0f 92       	push	r0
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	0f 92       	push	r0
     20a:	11 24       	eor	r1, r1
     20c:	0b b6       	in	r0, 0x3b	; 59
     20e:	0f 92       	push	r0
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	8f 93       	push	r24
     21a:	9f 93       	push	r25
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31
     220:	90 91 45 02 	lds	r25, 0x0245
     224:	86 b5       	in	r24, 0x26	; 38
     226:	82 53       	subi	r24, 0x32	; 50
     228:	86 bd       	out	0x26, r24	; 38
     22a:	20 91 43 02 	lds	r18, 0x0243
     22e:	30 91 44 02 	lds	r19, 0x0244
     232:	12 16       	cp	r1, r18
     234:	13 06       	cpc	r1, r19
     236:	54 f4       	brge	.+20     	; 0x24c <__vector_18+0x4a>
     238:	20 91 43 02 	lds	r18, 0x0243
     23c:	30 91 44 02 	lds	r19, 0x0244
     240:	21 50       	subi	r18, 0x01	; 1
     242:	31 09       	sbc	r19, r1
     244:	30 93 44 02 	sts	0x0244, r19
     248:	20 93 43 02 	sts	0x0243, r18
     24c:	40 91 84 00 	lds	r20, 0x0084
     250:	50 91 85 00 	lds	r21, 0x0085
     254:	20 91 88 00 	lds	r18, 0x0088
     258:	30 91 89 00 	lds	r19, 0x0089
     25c:	42 17       	cp	r20, r18
     25e:	53 07       	cpc	r21, r19
     260:	08 f0       	brcs	.+2      	; 0x264 <__vector_18+0x62>
     262:	9f 7d       	andi	r25, 0xDF	; 223
     264:	40 91 84 00 	lds	r20, 0x0084
     268:	50 91 85 00 	lds	r21, 0x0085
     26c:	20 91 8a 00 	lds	r18, 0x008A
     270:	30 91 8b 00 	lds	r19, 0x008B
     274:	42 17       	cp	r20, r18
     276:	53 07       	cpc	r21, r19
     278:	08 f0       	brcs	.+2      	; 0x27c <__vector_18+0x7a>
     27a:	9f 7b       	andi	r25, 0xBF	; 191
     27c:	20 91 b2 00 	lds	r18, 0x00B2
     280:	80 91 b4 00 	lds	r24, 0x00B4
     284:	28 17       	cp	r18, r24
     286:	08 f0       	brcs	.+2      	; 0x28a <__vector_18+0x88>
     288:	9f 77       	andi	r25, 0x7F	; 127
     28a:	88 b1       	in	r24, 0x08	; 8
     28c:	8f 71       	andi	r24, 0x1F	; 31
     28e:	89 2b       	or	r24, r25
     290:	88 b9       	out	0x08, r24	; 8
     292:	80 91 7a 00 	lds	r24, 0x007A
     296:	84 ff       	sbrs	r24, 4
     298:	4c c0       	rjmp	.+152    	; 0x332 <__vector_18+0x130>
     29a:	ea e7       	ldi	r30, 0x7A	; 122
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	80 61       	ori	r24, 0x10	; 16
     2a2:	80 83       	st	Z, r24
     2a4:	20 91 3c 02 	lds	r18, 0x023C
     2a8:	80 91 79 00 	lds	r24, 0x0079
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	e2 2f       	mov	r30, r18
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	ee 0f       	add	r30, r30
     2b4:	ff 1f       	adc	r31, r31
     2b6:	ec 5a       	subi	r30, 0xAC	; 172
     2b8:	fd 4f       	sbci	r31, 0xFD	; 253
     2ba:	91 83       	std	Z+1, r25	; 0x01
     2bc:	80 83       	st	Z, r24
     2be:	2d 30       	cpi	r18, 0x0D	; 13
     2c0:	49 f4       	brne	.+18     	; 0x2d4 <__vector_18+0xd2>
     2c2:	86 39       	cpi	r24, 0x96	; 150
     2c4:	91 05       	cpc	r25, r1
     2c6:	d8 f0       	brcs	.+54     	; 0x2fe <__vector_18+0xfc>
     2c8:	80 91 49 02 	lds	r24, 0x0249
     2cc:	81 60       	ori	r24, 0x01	; 1
     2ce:	80 93 49 02 	sts	0x0249, r24
     2d2:	15 c0       	rjmp	.+42     	; 0x2fe <__vector_18+0xfc>
     2d4:	2e 30       	cpi	r18, 0x0E	; 14
     2d6:	49 f4       	brne	.+18     	; 0x2ea <__vector_18+0xe8>
     2d8:	86 39       	cpi	r24, 0x96	; 150
     2da:	91 05       	cpc	r25, r1
     2dc:	80 f0       	brcs	.+32     	; 0x2fe <__vector_18+0xfc>
     2de:	80 91 49 02 	lds	r24, 0x0249
     2e2:	82 60       	ori	r24, 0x02	; 2
     2e4:	80 93 49 02 	sts	0x0249, r24
     2e8:	0a c0       	rjmp	.+20     	; 0x2fe <__vector_18+0xfc>
     2ea:	2f 30       	cpi	r18, 0x0F	; 15
     2ec:	41 f4       	brne	.+16     	; 0x2fe <__vector_18+0xfc>
     2ee:	86 39       	cpi	r24, 0x96	; 150
     2f0:	91 05       	cpc	r25, r1
     2f2:	28 f0       	brcs	.+10     	; 0x2fe <__vector_18+0xfc>
     2f4:	80 91 49 02 	lds	r24, 0x0249
     2f8:	84 60       	ori	r24, 0x04	; 4
     2fa:	80 93 49 02 	sts	0x0249, r24
     2fe:	ea e7       	ldi	r30, 0x7A	; 122
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	80 61       	ori	r24, 0x10	; 16
     306:	80 83       	st	Z, r24
     308:	80 91 3c 02 	lds	r24, 0x023C
     30c:	8f 5f       	subi	r24, 0xFF	; 255
     30e:	80 31       	cpi	r24, 0x10	; 16
     310:	18 f4       	brcc	.+6      	; 0x318 <__vector_18+0x116>
     312:	80 93 3c 02 	sts	0x023C, r24
     316:	02 c0       	rjmp	.+4      	; 0x31c <__vector_18+0x11a>
     318:	10 92 3c 02 	sts	0x023C, r1
     31c:	80 91 3c 02 	lds	r24, 0x023C
     320:	82 b9       	out	0x02, r24	; 2
     322:	ea e7       	ldi	r30, 0x7A	; 122
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	8f 73       	andi	r24, 0x3F	; 63
     32a:	80 83       	st	Z, r24
     32c:	80 81       	ld	r24, Z
     32e:	80 6c       	ori	r24, 0xC0	; 192
     330:	80 83       	st	Z, r24
     332:	80 91 41 02 	lds	r24, 0x0241
     336:	90 91 42 02 	lds	r25, 0x0242
     33a:	00 97       	sbiw	r24, 0x00	; 0
     33c:	11 f4       	brne	.+4      	; 0x342 <__vector_18+0x140>
     33e:	5f 9a       	sbi	0x0b, 7	; 11
     340:	e4 c0       	rjmp	.+456    	; 0x50a <__vector_18+0x308>
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	91 05       	cpc	r25, r1
     346:	11 f4       	brne	.+4      	; 0x34c <__vector_18+0x14a>
     348:	5f 98       	cbi	0x0b, 7	; 11
     34a:	df c0       	rjmp	.+446    	; 0x50a <__vector_18+0x308>
     34c:	80 32       	cpi	r24, 0x20	; 32
     34e:	23 e0       	ldi	r18, 0x03	; 3
     350:	92 07       	cpc	r25, r18
     352:	08 f0       	brcs	.+2      	; 0x356 <__vector_18+0x154>
     354:	8e c0       	rjmp	.+284    	; 0x472 <__vector_18+0x270>
     356:	20 91 4c 02 	lds	r18, 0x024C
     35a:	30 91 4d 02 	lds	r19, 0x024D
     35e:	21 15       	cp	r18, r1
     360:	31 05       	cpc	r19, r1
     362:	81 f0       	breq	.+32     	; 0x384 <__vector_18+0x182>
     364:	40 91 3d 02 	lds	r20, 0x023D
     368:	41 11       	cpse	r20, r1
     36a:	0c c0       	rjmp	.+24     	; 0x384 <__vector_18+0x182>
     36c:	34 99       	sbic	0x06, 4	; 6
     36e:	0a c0       	rjmp	.+20     	; 0x384 <__vector_18+0x182>
     370:	ac 01       	movw	r20, r24
     372:	42 1b       	sub	r20, r18
     374:	53 0b       	sbc	r21, r19
     376:	50 93 4d 02 	sts	0x024D, r21
     37a:	40 93 4c 02 	sts	0x024C, r20
     37e:	21 e0       	ldi	r18, 0x01	; 1
     380:	20 93 3d 02 	sts	0x023D, r18
     384:	20 91 4e 02 	lds	r18, 0x024E
     388:	30 91 4f 02 	lds	r19, 0x024F
     38c:	21 15       	cp	r18, r1
     38e:	31 05       	cpc	r19, r1
     390:	81 f0       	breq	.+32     	; 0x3b2 <__vector_18+0x1b0>
     392:	40 91 3e 02 	lds	r20, 0x023E
     396:	41 11       	cpse	r20, r1
     398:	0c c0       	rjmp	.+24     	; 0x3b2 <__vector_18+0x1b0>
     39a:	05 99       	sbic	0x00, 5	; 0
     39c:	0a c0       	rjmp	.+20     	; 0x3b2 <__vector_18+0x1b0>
     39e:	ac 01       	movw	r20, r24
     3a0:	42 1b       	sub	r20, r18
     3a2:	53 0b       	sbc	r21, r19
     3a4:	50 93 4f 02 	sts	0x024F, r21
     3a8:	40 93 4e 02 	sts	0x024E, r20
     3ac:	21 e0       	ldi	r18, 0x01	; 1
     3ae:	20 93 3e 02 	sts	0x023E, r18
     3b2:	20 91 50 02 	lds	r18, 0x0250
     3b6:	30 91 51 02 	lds	r19, 0x0251
     3ba:	21 15       	cp	r18, r1
     3bc:	31 05       	cpc	r19, r1
     3be:	81 f0       	breq	.+32     	; 0x3e0 <__vector_18+0x1de>
     3c0:	40 91 3f 02 	lds	r20, 0x023F
     3c4:	41 11       	cpse	r20, r1
     3c6:	0c c0       	rjmp	.+24     	; 0x3e0 <__vector_18+0x1de>
     3c8:	06 99       	sbic	0x00, 6	; 0
     3ca:	0a c0       	rjmp	.+20     	; 0x3e0 <__vector_18+0x1de>
     3cc:	ac 01       	movw	r20, r24
     3ce:	42 1b       	sub	r20, r18
     3d0:	53 0b       	sbc	r21, r19
     3d2:	50 93 51 02 	sts	0x0251, r21
     3d6:	40 93 50 02 	sts	0x0250, r20
     3da:	21 e0       	ldi	r18, 0x01	; 1
     3dc:	20 93 3f 02 	sts	0x023F, r18
     3e0:	20 91 52 02 	lds	r18, 0x0252
     3e4:	30 91 53 02 	lds	r19, 0x0253
     3e8:	21 15       	cp	r18, r1
     3ea:	31 05       	cpc	r19, r1
     3ec:	81 f0       	breq	.+32     	; 0x40e <__vector_18+0x20c>
     3ee:	40 91 40 02 	lds	r20, 0x0240
     3f2:	41 11       	cpse	r20, r1
     3f4:	0c c0       	rjmp	.+24     	; 0x40e <__vector_18+0x20c>
     3f6:	07 99       	sbic	0x00, 7	; 0
     3f8:	0a c0       	rjmp	.+20     	; 0x40e <__vector_18+0x20c>
     3fa:	ac 01       	movw	r20, r24
     3fc:	42 1b       	sub	r20, r18
     3fe:	53 0b       	sbc	r21, r19
     400:	50 93 53 02 	sts	0x0253, r21
     404:	40 93 52 02 	sts	0x0252, r20
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	20 93 40 02 	sts	0x0240, r18
     40e:	20 91 4c 02 	lds	r18, 0x024C
     412:	30 91 4d 02 	lds	r19, 0x024D
     416:	23 2b       	or	r18, r19
     418:	31 f4       	brne	.+12     	; 0x426 <__vector_18+0x224>
     41a:	34 9b       	sbis	0x06, 4	; 6
     41c:	04 c0       	rjmp	.+8      	; 0x426 <__vector_18+0x224>
     41e:	90 93 4d 02 	sts	0x024D, r25
     422:	80 93 4c 02 	sts	0x024C, r24
     426:	20 91 4e 02 	lds	r18, 0x024E
     42a:	30 91 4f 02 	lds	r19, 0x024F
     42e:	23 2b       	or	r18, r19
     430:	31 f4       	brne	.+12     	; 0x43e <__vector_18+0x23c>
     432:	05 9b       	sbis	0x00, 5	; 0
     434:	04 c0       	rjmp	.+8      	; 0x43e <__vector_18+0x23c>
     436:	90 93 4f 02 	sts	0x024F, r25
     43a:	80 93 4e 02 	sts	0x024E, r24
     43e:	20 91 50 02 	lds	r18, 0x0250
     442:	30 91 51 02 	lds	r19, 0x0251
     446:	23 2b       	or	r18, r19
     448:	31 f4       	brne	.+12     	; 0x456 <__vector_18+0x254>
     44a:	06 9b       	sbis	0x00, 6	; 0
     44c:	04 c0       	rjmp	.+8      	; 0x456 <__vector_18+0x254>
     44e:	90 93 51 02 	sts	0x0251, r25
     452:	80 93 50 02 	sts	0x0250, r24
     456:	20 91 52 02 	lds	r18, 0x0252
     45a:	30 91 53 02 	lds	r19, 0x0253
     45e:	23 2b       	or	r18, r19
     460:	09 f0       	breq	.+2      	; 0x464 <__vector_18+0x262>
     462:	53 c0       	rjmp	.+166    	; 0x50a <__vector_18+0x308>
     464:	07 9b       	sbis	0x00, 7	; 0
     466:	51 c0       	rjmp	.+162    	; 0x50a <__vector_18+0x308>
     468:	90 93 53 02 	sts	0x0253, r25
     46c:	80 93 52 02 	sts	0x0252, r24
     470:	4c c0       	rjmp	.+152    	; 0x50a <__vector_18+0x308>
     472:	80 32       	cpi	r24, 0x20	; 32
     474:	93 40       	sbci	r25, 0x03	; 3
     476:	09 f0       	breq	.+2      	; 0x47a <__vector_18+0x278>
     478:	48 c0       	rjmp	.+144    	; 0x50a <__vector_18+0x308>
     47a:	80 91 3d 02 	lds	r24, 0x023D
     47e:	81 11       	cpse	r24, r1
     480:	06 c0       	rjmp	.+12     	; 0x48e <__vector_18+0x28c>
     482:	80 e2       	ldi	r24, 0x20	; 32
     484:	93 e0       	ldi	r25, 0x03	; 3
     486:	90 93 4d 02 	sts	0x024D, r25
     48a:	80 93 4c 02 	sts	0x024C, r24
     48e:	80 91 4c 02 	lds	r24, 0x024C
     492:	90 91 4d 02 	lds	r25, 0x024D
     496:	90 93 dc 02 	sts	0x02DC, r25
     49a:	80 93 db 02 	sts	0x02DB, r24
     49e:	80 91 3e 02 	lds	r24, 0x023E
     4a2:	81 11       	cpse	r24, r1
     4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <__vector_18+0x2b0>
     4a6:	80 e2       	ldi	r24, 0x20	; 32
     4a8:	93 e0       	ldi	r25, 0x03	; 3
     4aa:	90 93 4f 02 	sts	0x024F, r25
     4ae:	80 93 4e 02 	sts	0x024E, r24
     4b2:	80 91 4e 02 	lds	r24, 0x024E
     4b6:	90 91 4f 02 	lds	r25, 0x024F
     4ba:	90 93 de 02 	sts	0x02DE, r25
     4be:	80 93 dd 02 	sts	0x02DD, r24
     4c2:	80 91 3f 02 	lds	r24, 0x023F
     4c6:	81 11       	cpse	r24, r1
     4c8:	06 c0       	rjmp	.+12     	; 0x4d6 <__vector_18+0x2d4>
     4ca:	80 e2       	ldi	r24, 0x20	; 32
     4cc:	93 e0       	ldi	r25, 0x03	; 3
     4ce:	90 93 51 02 	sts	0x0251, r25
     4d2:	80 93 50 02 	sts	0x0250, r24
     4d6:	80 91 50 02 	lds	r24, 0x0250
     4da:	90 91 51 02 	lds	r25, 0x0251
     4de:	90 93 e0 02 	sts	0x02E0, r25
     4e2:	80 93 df 02 	sts	0x02DF, r24
     4e6:	80 91 40 02 	lds	r24, 0x0240
     4ea:	81 11       	cpse	r24, r1
     4ec:	06 c0       	rjmp	.+12     	; 0x4fa <__vector_18+0x2f8>
     4ee:	80 e2       	ldi	r24, 0x20	; 32
     4f0:	93 e0       	ldi	r25, 0x03	; 3
     4f2:	90 93 53 02 	sts	0x0253, r25
     4f6:	80 93 52 02 	sts	0x0252, r24
     4fa:	80 91 52 02 	lds	r24, 0x0252
     4fe:	90 91 53 02 	lds	r25, 0x0253
     502:	90 93 e2 02 	sts	0x02E2, r25
     506:	80 93 e1 02 	sts	0x02E1, r24
     50a:	80 91 41 02 	lds	r24, 0x0241
     50e:	90 91 42 02 	lds	r25, 0x0242
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	89 3e       	cpi	r24, 0xE9	; 233
     516:	23 e0       	ldi	r18, 0x03	; 3
     518:	92 07       	cpc	r25, r18
     51a:	28 f4       	brcc	.+10     	; 0x526 <__vector_18+0x324>
     51c:	90 93 42 02 	sts	0x0242, r25
     520:	80 93 41 02 	sts	0x0241, r24
     524:	14 c0       	rjmp	.+40     	; 0x54e <__vector_18+0x34c>
     526:	10 92 42 02 	sts	0x0242, r1
     52a:	10 92 41 02 	sts	0x0241, r1
     52e:	ec e4       	ldi	r30, 0x4C	; 76
     530:	f2 e0       	ldi	r31, 0x02	; 2
     532:	11 82       	std	Z+1, r1	; 0x01
     534:	10 82       	st	Z, r1
     536:	13 82       	std	Z+3, r1	; 0x03
     538:	12 82       	std	Z+2, r1	; 0x02
     53a:	15 82       	std	Z+5, r1	; 0x05
     53c:	14 82       	std	Z+4, r1	; 0x04
     53e:	17 82       	std	Z+7, r1	; 0x07
     540:	16 82       	std	Z+6, r1	; 0x06
     542:	ed e3       	ldi	r30, 0x3D	; 61
     544:	f2 e0       	ldi	r31, 0x02	; 2
     546:	10 82       	st	Z, r1
     548:	11 82       	std	Z+1, r1	; 0x01
     54a:	12 82       	std	Z+2, r1	; 0x02
     54c:	13 82       	std	Z+3, r1	; 0x03
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	9f 91       	pop	r25
     554:	8f 91       	pop	r24
     556:	5f 91       	pop	r21
     558:	4f 91       	pop	r20
     55a:	3f 91       	pop	r19
     55c:	2f 91       	pop	r18
     55e:	0f 90       	pop	r0
     560:	0b be       	out	0x3b, r0	; 59
     562:	0f 90       	pop	r0
     564:	0f be       	out	0x3f, r0	; 63
     566:	0f 90       	pop	r0
     568:	1f 90       	pop	r1
     56a:	18 95       	reti

0000056c <adc_init>:
     56c:	10 92 3c 02 	sts	0x023C, r1
     570:	12 b8       	out	0x02, r1	; 2
     572:	ea e7       	ldi	r30, 0x7A	; 122
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	10 82       	st	Z, r1
     578:	84 e6       	ldi	r24, 0x64	; 100
     57a:	80 93 7c 00 	sts	0x007C, r24
     57e:	80 e8       	ldi	r24, 0x80	; 128
     580:	80 bf       	out	0x30, r24	; 48
     582:	85 e8       	ldi	r24, 0x85	; 133
     584:	80 83       	st	Z, r24
     586:	80 81       	ld	r24, Z
     588:	8f 73       	andi	r24, 0x3F	; 63
     58a:	80 83       	st	Z, r24
     58c:	80 81       	ld	r24, Z
     58e:	80 6c       	ori	r24, 0xC0	; 192
     590:	80 83       	st	Z, r24
     592:	08 95       	ret

00000594 <echo_clear>:
     594:	ac e4       	ldi	r26, 0x4C	; 76
     596:	b2 e0       	ldi	r27, 0x02	; 2
     598:	11 96       	adiw	r26, 0x01	; 1
     59a:	1c 92       	st	X, r1
     59c:	1e 92       	st	-X, r1
     59e:	ed e3       	ldi	r30, 0x3D	; 61
     5a0:	f2 e0       	ldi	r31, 0x02	; 2
     5a2:	10 82       	st	Z, r1
     5a4:	13 96       	adiw	r26, 0x03	; 3
     5a6:	1c 92       	st	X, r1
     5a8:	1e 92       	st	-X, r1
     5aa:	12 97       	sbiw	r26, 0x02	; 2
     5ac:	11 82       	std	Z+1, r1	; 0x01
     5ae:	15 96       	adiw	r26, 0x05	; 5
     5b0:	1c 92       	st	X, r1
     5b2:	1e 92       	st	-X, r1
     5b4:	14 97       	sbiw	r26, 0x04	; 4
     5b6:	12 82       	std	Z+2, r1	; 0x02
     5b8:	17 96       	adiw	r26, 0x07	; 7
     5ba:	1c 92       	st	X, r1
     5bc:	1e 92       	st	-X, r1
     5be:	16 97       	sbiw	r26, 0x06	; 6
     5c0:	13 82       	std	Z+3, r1	; 0x03
     5c2:	08 95       	ret

000005c4 <init_devices>:
     5c4:	f8 94       	cli
     5c6:	15 be       	out	0x35, r1	; 53
     5c8:	1d ba       	out	0x1d, r1	; 29
     5ca:	e4 df       	rcall	.-56     	; 0x594 <echo_clear>
     5cc:	e9 dd       	rcall	.-1070   	; 0x1a0 <port_init>
     5ce:	ce df       	rcall	.-100    	; 0x56c <adc_init>
     5d0:	f7 dd       	rcall	.-1042   	; 0x1c0 <timer_init>
     5d2:	78 94       	sei
     5d4:	08 95       	ret

000005d6 <Lcd_Cmd>:
     5d6:	cf 93       	push	r28
     5d8:	c8 2f       	mov	r28, r24
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	b3 dd       	rcall	.-1178   	; 0x146 <delay20us>
     5e0:	8c 2f       	mov	r24, r28
     5e2:	80 7f       	andi	r24, 0xF0	; 240
     5e4:	88 60       	ori	r24, 0x08	; 8
     5e6:	85 b9       	out	0x05, r24	; 5
     5e8:	2b 98       	cbi	0x05, 3	; 5
     5ea:	20 e1       	ldi	r18, 0x10	; 16
     5ec:	c2 02       	muls	r28, r18
     5ee:	c0 01       	movw	r24, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	88 60       	ori	r24, 0x08	; 8
     5f4:	85 b9       	out	0x05, r24	; 5
     5f6:	2b 98       	cbi	0x05, 3	; 5
     5f8:	cf 91       	pop	r28
     5fa:	08 95       	ret

000005fc <Lcd_Init>:
     5fc:	82 e3       	ldi	r24, 0x32	; 50
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	c1 dd       	rcall	.-1150   	; 0x184 <delay1ms>
     602:	88 e2       	ldi	r24, 0x28	; 40
     604:	85 b9       	out	0x05, r24	; 5
     606:	2b 98       	cbi	0x05, 3	; 5
     608:	e6 df       	rcall	.-52     	; 0x5d6 <Lcd_Cmd>
     60a:	88 e2       	ldi	r24, 0x28	; 40
     60c:	e4 df       	rcall	.-56     	; 0x5d6 <Lcd_Cmd>
     60e:	8c e0       	ldi	r24, 0x0C	; 12
     610:	e2 df       	rcall	.-60     	; 0x5d6 <Lcd_Cmd>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	e0 df       	rcall	.-64     	; 0x5d6 <Lcd_Cmd>
     616:	83 e0       	ldi	r24, 0x03	; 3
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	b4 dd       	rcall	.-1176   	; 0x184 <delay1ms>
     61c:	86 e0       	ldi	r24, 0x06	; 6
     61e:	db cf       	rjmp	.-74     	; 0x5d6 <Lcd_Cmd>
     620:	08 95       	ret

00000622 <Lcd_Write_String>:
}

void Lcd_Write_String(char d_line, char *lcd_str)
{
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	eb 01       	movw	r28, r22
	Lcd_Cmd(d_line);
     628:	d6 df       	rcall	.-84     	; 0x5d6 <Lcd_Cmd>
	while(*lcd_str != '\0')
     62a:	88 81       	ld	r24, Y
     62c:	88 23       	and	r24, r24
     62e:	29 f0       	breq	.+10     	; 0x63a <Lcd_Write_String+0x18>
     630:	21 96       	adiw	r28, 0x01	; 1
	{
		Lcd_Data(*lcd_str);
     632:	95 dd       	rcall	.-1238   	; 0x15e <Lcd_Data>
}

void Lcd_Write_String(char d_line, char *lcd_str)
{
	Lcd_Cmd(d_line);
	while(*lcd_str != '\0')
     634:	89 91       	ld	r24, Y+
     636:	81 11       	cpse	r24, r1
     638:	fc cf       	rjmp	.-8      	; 0x632 <Lcd_Write_String+0x10>
	{
		Lcd_Data(*lcd_str);
		lcd_str++;
	}
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <DigitDisplay>:

void DigitDisplay(unsigned int x)
{
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	ec 01       	movw	r28, r24
	Lcd_Data((int)((x%1000)/100)+'0');
     646:	9c 01       	movw	r18, r24
     648:	36 95       	lsr	r19
     64a:	27 95       	ror	r18
     64c:	36 95       	lsr	r19
     64e:	27 95       	ror	r18
     650:	36 95       	lsr	r19
     652:	27 95       	ror	r18
     654:	a5 ec       	ldi	r26, 0xC5	; 197
     656:	b0 e2       	ldi	r27, 0x20	; 32
     658:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__umulhisi3>
     65c:	92 95       	swap	r25
     65e:	82 95       	swap	r24
     660:	8f 70       	andi	r24, 0x0F	; 15
     662:	89 27       	eor	r24, r25
     664:	9f 70       	andi	r25, 0x0F	; 15
     666:	89 27       	eor	r24, r25
     668:	48 ee       	ldi	r20, 0xE8	; 232
     66a:	53 e0       	ldi	r21, 0x03	; 3
     66c:	84 9f       	mul	r24, r20
     66e:	90 01       	movw	r18, r0
     670:	85 9f       	mul	r24, r21
     672:	30 0d       	add	r19, r0
     674:	94 9f       	mul	r25, r20
     676:	30 0d       	add	r19, r0
     678:	11 24       	eor	r1, r1
     67a:	ce 01       	movw	r24, r28
     67c:	82 1b       	sub	r24, r18
     67e:	93 0b       	sbc	r25, r19
     680:	9c 01       	movw	r18, r24
     682:	36 95       	lsr	r19
     684:	27 95       	ror	r18
     686:	36 95       	lsr	r19
     688:	27 95       	ror	r18
     68a:	ab e7       	ldi	r26, 0x7B	; 123
     68c:	b4 e1       	ldi	r27, 0x14	; 20
     68e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__umulhisi3>
     692:	96 95       	lsr	r25
     694:	87 95       	ror	r24
     696:	80 5d       	subi	r24, 0xD0	; 208
     698:	62 dd       	rcall	.-1340   	; 0x15e <Lcd_Data>
	Lcd_Data((int)((x%100)/10)+'0');
     69a:	9e 01       	movw	r18, r28
     69c:	36 95       	lsr	r19
     69e:	27 95       	ror	r18
     6a0:	36 95       	lsr	r19
     6a2:	27 95       	ror	r18
     6a4:	ab e7       	ldi	r26, 0x7B	; 123
     6a6:	b4 e1       	ldi	r27, 0x14	; 20
     6a8:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__umulhisi3>
     6ac:	96 95       	lsr	r25
     6ae:	87 95       	ror	r24
     6b0:	44 e6       	ldi	r20, 0x64	; 100
     6b2:	48 9f       	mul	r20, r24
     6b4:	90 01       	movw	r18, r0
     6b6:	49 9f       	mul	r20, r25
     6b8:	30 0d       	add	r19, r0
     6ba:	11 24       	eor	r1, r1
     6bc:	ce 01       	movw	r24, r28
     6be:	82 1b       	sub	r24, r18
     6c0:	93 0b       	sbc	r25, r19
     6c2:	9c 01       	movw	r18, r24
     6c4:	ad ec       	ldi	r26, 0xCD	; 205
     6c6:	bc ec       	ldi	r27, 0xCC	; 204
     6c8:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__umulhisi3>
     6cc:	96 95       	lsr	r25
     6ce:	87 95       	ror	r24
     6d0:	96 95       	lsr	r25
     6d2:	87 95       	ror	r24
     6d4:	96 95       	lsr	r25
     6d6:	87 95       	ror	r24
     6d8:	80 5d       	subi	r24, 0xD0	; 208
     6da:	41 dd       	rcall	.-1406   	; 0x15e <Lcd_Data>
	Lcd_Data((int)((x%10))+'0');
     6dc:	9e 01       	movw	r18, r28
     6de:	ad ec       	ldi	r26, 0xCD	; 205
     6e0:	bc ec       	ldi	r27, 0xCC	; 204
     6e2:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__umulhisi3>
     6e6:	96 95       	lsr	r25
     6e8:	87 95       	ror	r24
     6ea:	96 95       	lsr	r25
     6ec:	87 95       	ror	r24
     6ee:	96 95       	lsr	r25
     6f0:	87 95       	ror	r24
     6f2:	9c 01       	movw	r18, r24
     6f4:	22 0f       	add	r18, r18
     6f6:	33 1f       	adc	r19, r19
     6f8:	88 0f       	add	r24, r24
     6fa:	99 1f       	adc	r25, r25
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	88 0f       	add	r24, r24
     702:	99 1f       	adc	r25, r25
     704:	82 0f       	add	r24, r18
     706:	93 1f       	adc	r25, r19
     708:	9e 01       	movw	r18, r28
     70a:	28 1b       	sub	r18, r24
     70c:	39 0b       	sbc	r19, r25
     70e:	c9 01       	movw	r24, r18
     710:	80 5d       	subi	r24, 0xD0	; 208
     712:	25 dd       	rcall	.-1462   	; 0x15e <Lcd_Data>
}
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	08 95       	ret

0000071a <AngleDisplay>:
void AngleDisplay(unsigned int x)
{
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	ec 01       	movw	r28, r24
	Lcd_Data((int)((x%10000)/1000)+'0');
     720:	9c 01       	movw	r18, r24
     722:	32 95       	swap	r19
     724:	22 95       	swap	r18
     726:	2f 70       	andi	r18, 0x0F	; 15
     728:	23 27       	eor	r18, r19
     72a:	3f 70       	andi	r19, 0x0F	; 15
     72c:	23 27       	eor	r18, r19
     72e:	a7 e4       	ldi	r26, 0x47	; 71
     730:	b3 e0       	ldi	r27, 0x03	; 3
     732:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__umulhisi3>
     736:	96 95       	lsr	r25
     738:	87 95       	ror	r24
     73a:	96 95       	lsr	r25
     73c:	87 95       	ror	r24
     73e:	96 95       	lsr	r25
     740:	87 95       	ror	r24
     742:	40 e1       	ldi	r20, 0x10	; 16
     744:	57 e2       	ldi	r21, 0x27	; 39
     746:	84 9f       	mul	r24, r20
     748:	90 01       	movw	r18, r0
     74a:	85 9f       	mul	r24, r21
     74c:	30 0d       	add	r19, r0
     74e:	94 9f       	mul	r25, r20
     750:	30 0d       	add	r19, r0
     752:	11 24       	eor	r1, r1
     754:	ce 01       	movw	r24, r28
     756:	82 1b       	sub	r24, r18
     758:	93 0b       	sbc	r25, r19
     75a:	9c 01       	movw	r18, r24
     75c:	36 95       	lsr	r19
     75e:	27 95       	ror	r18
     760:	36 95       	lsr	r19
     762:	27 95       	ror	r18
     764:	36 95       	lsr	r19
     766:	27 95       	ror	r18
     768:	a5 ec       	ldi	r26, 0xC5	; 197
     76a:	b0 e2       	ldi	r27, 0x20	; 32
     76c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__umulhisi3>
     770:	92 95       	swap	r25
     772:	82 95       	swap	r24
     774:	8f 70       	andi	r24, 0x0F	; 15
     776:	89 27       	eor	r24, r25
     778:	9f 70       	andi	r25, 0x0F	; 15
     77a:	89 27       	eor	r24, r25
     77c:	80 5d       	subi	r24, 0xD0	; 208
     77e:	ef dc       	rcall	.-1570   	; 0x15e <Lcd_Data>
	Lcd_Data((int)((x%1000)/100)+'0');
     780:	9e 01       	movw	r18, r28
     782:	36 95       	lsr	r19
     784:	27 95       	ror	r18
     786:	36 95       	lsr	r19
     788:	27 95       	ror	r18
     78a:	36 95       	lsr	r19
     78c:	27 95       	ror	r18
     78e:	a5 ec       	ldi	r26, 0xC5	; 197
     790:	b0 e2       	ldi	r27, 0x20	; 32
     792:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__umulhisi3>
     796:	92 95       	swap	r25
     798:	82 95       	swap	r24
     79a:	8f 70       	andi	r24, 0x0F	; 15
     79c:	89 27       	eor	r24, r25
     79e:	9f 70       	andi	r25, 0x0F	; 15
     7a0:	89 27       	eor	r24, r25
     7a2:	48 ee       	ldi	r20, 0xE8	; 232
     7a4:	53 e0       	ldi	r21, 0x03	; 3
     7a6:	84 9f       	mul	r24, r20
     7a8:	90 01       	movw	r18, r0
     7aa:	85 9f       	mul	r24, r21
     7ac:	30 0d       	add	r19, r0
     7ae:	94 9f       	mul	r25, r20
     7b0:	30 0d       	add	r19, r0
     7b2:	11 24       	eor	r1, r1
     7b4:	ce 01       	movw	r24, r28
     7b6:	82 1b       	sub	r24, r18
     7b8:	93 0b       	sbc	r25, r19
     7ba:	9c 01       	movw	r18, r24
     7bc:	36 95       	lsr	r19
     7be:	27 95       	ror	r18
     7c0:	36 95       	lsr	r19
     7c2:	27 95       	ror	r18
     7c4:	ab e7       	ldi	r26, 0x7B	; 123
     7c6:	b4 e1       	ldi	r27, 0x14	; 20
     7c8:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__umulhisi3>
     7cc:	96 95       	lsr	r25
     7ce:	87 95       	ror	r24
     7d0:	80 5d       	subi	r24, 0xD0	; 208
     7d2:	c5 dc       	rcall	.-1654   	; 0x15e <Lcd_Data>
	Lcd_Data((int)((x%100)/10)+'0');
     7d4:	9e 01       	movw	r18, r28
     7d6:	36 95       	lsr	r19
     7d8:	27 95       	ror	r18
     7da:	36 95       	lsr	r19
     7dc:	27 95       	ror	r18
     7de:	ab e7       	ldi	r26, 0x7B	; 123
     7e0:	b4 e1       	ldi	r27, 0x14	; 20
     7e2:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__umulhisi3>
     7e6:	96 95       	lsr	r25
     7e8:	87 95       	ror	r24
     7ea:	44 e6       	ldi	r20, 0x64	; 100
     7ec:	48 9f       	mul	r20, r24
     7ee:	90 01       	movw	r18, r0
     7f0:	49 9f       	mul	r20, r25
     7f2:	30 0d       	add	r19, r0
     7f4:	11 24       	eor	r1, r1
     7f6:	ce 01       	movw	r24, r28
     7f8:	82 1b       	sub	r24, r18
     7fa:	93 0b       	sbc	r25, r19
     7fc:	9c 01       	movw	r18, r24
     7fe:	ad ec       	ldi	r26, 0xCD	; 205
     800:	bc ec       	ldi	r27, 0xCC	; 204
     802:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__umulhisi3>
     806:	96 95       	lsr	r25
     808:	87 95       	ror	r24
     80a:	96 95       	lsr	r25
     80c:	87 95       	ror	r24
     80e:	96 95       	lsr	r25
     810:	87 95       	ror	r24
     812:	80 5d       	subi	r24, 0xD0	; 208
     814:	a4 dc       	rcall	.-1720   	; 0x15e <Lcd_Data>
	Lcd_Data('.');
     816:	8e e2       	ldi	r24, 0x2E	; 46
     818:	a2 dc       	rcall	.-1724   	; 0x15e <Lcd_Data>
	Lcd_Data((int)((x%10))+'0');
     81a:	9e 01       	movw	r18, r28
     81c:	ad ec       	ldi	r26, 0xCD	; 205
     81e:	bc ec       	ldi	r27, 0xCC	; 204
     820:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__umulhisi3>
     824:	96 95       	lsr	r25
     826:	87 95       	ror	r24
     828:	96 95       	lsr	r25
     82a:	87 95       	ror	r24
     82c:	96 95       	lsr	r25
     82e:	87 95       	ror	r24
     830:	9c 01       	movw	r18, r24
     832:	22 0f       	add	r18, r18
     834:	33 1f       	adc	r19, r19
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	88 0f       	add	r24, r24
     83c:	99 1f       	adc	r25, r25
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	82 0f       	add	r24, r18
     844:	93 1f       	adc	r25, r19
     846:	9e 01       	movw	r18, r28
     848:	28 1b       	sub	r18, r24
     84a:	39 0b       	sbc	r19, r25
     84c:	c9 01       	movw	r24, r18
     84e:	80 5d       	subi	r24, 0xD0	; 208
     850:	86 dc       	rcall	.-1780   	; 0x15e <Lcd_Data>
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <Lcd_Clear>:

void Lcd_Clear()
{
	Lcd_Cmd(0x01);
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	bd de       	rcall	.-646    	; 0x5d6 <Lcd_Cmd>
	delay1ms(2);
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	91 cc       	rjmp	.-1758   	; 0x184 <delay1ms>
     862:	08 95       	ret

00000864 <Volt_Display>:
}

void Volt_Display(void)
{
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29

void Lcd_Move(char line, char pos)
{
	pos=(line<<6)+pos;
	pos |= 0x80;
	Lcd_Cmd(pos);
     86c:	8b e8       	ldi	r24, 0x8B	; 139
     86e:	b3 de       	rcall	.-666    	; 0x5d6 <Lcd_Cmd>
void Volt_Display(void)
{
	//int volt = ((float)analog[12]*0.625 -2.5);
	
	Lcd_Move(0, 11);
	Lcd_Data((int)((voltage%1000)/100)+'0');
     870:	c4 e5       	ldi	r28, 0x54	; 84
     872:	d2 e0       	ldi	r29, 0x02	; 2
     874:	68 8d       	ldd	r22, Y+24	; 0x18
     876:	79 8d       	ldd	r23, Y+25	; 0x19
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__floatunsisf>
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	40 e2       	ldi	r20, 0x20	; 32
     886:	5f e3       	ldi	r21, 0x3F	; 63
     888:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	40 e2       	ldi	r20, 0x20	; 32
     892:	50 e4       	ldi	r21, 0x40	; 64
     894:	c7 d6       	rcall	.+3470   	; 0x1624 <__subsf3>
     896:	f3 d7       	rcall	.+4070   	; 0x187e <__fixsfsi>
     898:	cb 01       	movw	r24, r22
     89a:	68 ee       	ldi	r22, 0xE8	; 232
     89c:	73 e0       	ldi	r23, 0x03	; 3
     89e:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__divmodhi4>
     8a2:	04 e6       	ldi	r16, 0x64	; 100
     8a4:	10 e0       	ldi	r17, 0x00	; 0
     8a6:	b8 01       	movw	r22, r16
     8a8:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__divmodhi4>
     8ac:	80 e3       	ldi	r24, 0x30	; 48
     8ae:	86 0f       	add	r24, r22
     8b0:	56 dc       	rcall	.-1876   	; 0x15e <Lcd_Data>
	Lcd_Data((int)((voltage%100)/10)+'0');
     8b2:	88 8d       	ldd	r24, Y+24	; 0x18
     8b4:	99 8d       	ldd	r25, Y+25	; 0x19
     8b6:	bc 01       	movw	r22, r24
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__floatunsisf>
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	40 e2       	ldi	r20, 0x20	; 32
     8c6:	5f e3       	ldi	r21, 0x3F	; 63
     8c8:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e2       	ldi	r20, 0x20	; 32
     8d2:	50 e4       	ldi	r21, 0x40	; 64
     8d4:	a7 d6       	rcall	.+3406   	; 0x1624 <__subsf3>
     8d6:	d3 d7       	rcall	.+4006   	; 0x187e <__fixsfsi>
     8d8:	cb 01       	movw	r24, r22
     8da:	b8 01       	movw	r22, r16
     8dc:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__divmodhi4>
     8e0:	0a e0       	ldi	r16, 0x0A	; 10
     8e2:	10 e0       	ldi	r17, 0x00	; 0
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__divmodhi4>
     8ea:	80 e3       	ldi	r24, 0x30	; 48
     8ec:	86 0f       	add	r24, r22
     8ee:	37 dc       	rcall	.-1938   	; 0x15e <Lcd_Data>
	Lcd_Data('.');
     8f0:	8e e2       	ldi	r24, 0x2E	; 46
     8f2:	35 dc       	rcall	.-1942   	; 0x15e <Lcd_Data>
	Lcd_Data((int)((voltage%10))+'0');
     8f4:	88 8d       	ldd	r24, Y+24	; 0x18
     8f6:	99 8d       	ldd	r25, Y+25	; 0x19
     8f8:	bc 01       	movw	r22, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	f0 d7       	rcall	.+4064   	; 0x18e0 <__floatunsisf>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e2       	ldi	r20, 0x20	; 32
     906:	5f e3       	ldi	r21, 0x3F	; 63
     908:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e2       	ldi	r20, 0x20	; 32
     912:	50 e4       	ldi	r21, 0x40	; 64
     914:	87 d6       	rcall	.+3342   	; 0x1624 <__subsf3>
     916:	b3 d7       	rcall	.+3942   	; 0x187e <__fixsfsi>
     918:	cb 01       	movw	r24, r22
     91a:	b8 01       	movw	r22, r16
     91c:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__divmodhi4>
     920:	80 5d       	subi	r24, 0xD0	; 208
     922:	1d dc       	rcall	.-1990   	; 0x15e <Lcd_Data>
	Lcd_Data('V');
     924:	86 e5       	ldi	r24, 0x56	; 86
     926:	1b dc       	rcall	.-1994   	; 0x15e <Lcd_Data>
}
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	08 95       	ret

00000932 <IIC_WRITE>:

void IIC_WRITE(unsigned char add, unsigned char reg, unsigned char data)
{
	int error_code=0;

	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     932:	94 ea       	ldi	r25, 0xA4	; 164
     934:	90 93 bc 00 	sts	0x00BC, r25
	while (!(TWCR &	(1<<TWINT)));
     938:	ec eb       	ldi	r30, 0xBC	; 188
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	90 81       	ld	r25, Z
     93e:	99 23       	and	r25, r25
     940:	ec f7       	brge	.-6      	; 0x93c <IIC_WRITE+0xa>
	if ((TWSR & 0xF8) != START)
     942:	90 91 b9 00 	lds	r25, 0x00B9
     946:	98 7f       	andi	r25, 0xF8	; 248
     948:	98 30       	cpi	r25, 0x08	; 8
     94a:	39 f0       	breq	.+14     	; 0x95a <IIC_WRITE+0x28>
	{
		Lcd_Write_String(LINE2,"START ERROR");
     94c:	65 e2       	ldi	r22, 0x25	; 37
     94e:	71 e0       	ldi	r23, 0x01	; 1
     950:	80 ec       	ldi	r24, 0xC0	; 192
     952:	67 de       	rcall	.-818    	; 0x622 <Lcd_Write_String>
		error_code=TWSR & 0xF8;
     954:	80 91 b9 00 	lds	r24, 0x00B9
		goto write_error;
     958:	48 c0       	rjmp	.+144    	; 0x9ea <IIC_WRITE+0xb8>
	}
	TWDR = add;
     95a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) |	(1<<TWEN);
     95e:	84 e8       	ldi	r24, 0x84	; 132
     960:	80 93 bc 00 	sts	0x00BC, r24
	PORTD &= 0xFE;
     964:	58 98       	cbi	0x0b, 0	; 11
	while (!(TWCR &	(1<<TWINT)));
     966:	ec eb       	ldi	r30, 0xBC	; 188
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 81       	ld	r24, Z
     96c:	88 23       	and	r24, r24
     96e:	ec f7       	brge	.-6      	; 0x96a <IIC_WRITE+0x38>
	if ((TWSR & 0xF8) != MT_SLA_ACK)
     970:	80 91 b9 00 	lds	r24, 0x00B9
     974:	88 7f       	andi	r24, 0xF8	; 248
     976:	88 31       	cpi	r24, 0x18	; 24
     978:	39 f0       	breq	.+14     	; 0x988 <IIC_WRITE+0x56>
	{
		Lcd_Write_String(LINE2,"MT_SLA_ACK ERROR");
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	71 e0       	ldi	r23, 0x01	; 1
     97e:	80 ec       	ldi	r24, 0xC0	; 192
     980:	50 de       	rcall	.-864    	; 0x622 <Lcd_Write_String>
		error_code=TWSR & 0xF8;
     982:	80 91 b9 00 	lds	r24, 0x00B9
		goto write_error;
     986:	31 c0       	rjmp	.+98     	; 0x9ea <IIC_WRITE+0xb8>
	}
	PORTD |= 0x01;	
     988:	58 9a       	sbi	0x0b, 0	; 11
	
	TWDR = reg;
     98a:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) |	(1<<TWEN);
     98e:	84 e8       	ldi	r24, 0x84	; 132
     990:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR &	(1<<TWINT)));
     994:	ec eb       	ldi	r30, 0xBC	; 188
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	80 81       	ld	r24, Z
     99a:	88 23       	and	r24, r24
     99c:	ec f7       	brge	.-6      	; 0x998 <IIC_WRITE+0x66>
	if ((TWSR & 0xF8) !=MT_DATA_ACK)
     99e:	80 91 b9 00 	lds	r24, 0x00B9
     9a2:	88 7f       	andi	r24, 0xF8	; 248
     9a4:	88 32       	cpi	r24, 0x28	; 40
     9a6:	39 f0       	breq	.+14     	; 0x9b6 <IIC_WRITE+0x84>
	{
		Lcd_Write_String(LINE2,"MT_DATA_ACK ERROR");
     9a8:	61 e1       	ldi	r22, 0x11	; 17
     9aa:	71 e0       	ldi	r23, 0x01	; 1
     9ac:	80 ec       	ldi	r24, 0xC0	; 192
     9ae:	39 de       	rcall	.-910    	; 0x622 <Lcd_Write_String>
		error_code=TWSR & 0xF8;
     9b0:	80 91 b9 00 	lds	r24, 0x00B9
		goto write_error;
     9b4:	1a c0       	rjmp	.+52     	; 0x9ea <IIC_WRITE+0xb8>
	}
	TWDR = data;
     9b6:	40 93 bb 00 	sts	0x00BB, r20
	TWCR = (1<<TWINT) |	(1<<TWEN);
     9ba:	84 e8       	ldi	r24, 0x84	; 132
     9bc:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR &	(1<<TWINT)));
     9c0:	ec eb       	ldi	r30, 0xBC	; 188
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	80 81       	ld	r24, Z
     9c6:	88 23       	and	r24, r24
     9c8:	ec f7       	brge	.-6      	; 0x9c4 <IIC_WRITE+0x92>
	if ((TWSR & 0xF8) !=MT_DATA_ACK)
     9ca:	80 91 b9 00 	lds	r24, 0x00B9
     9ce:	88 7f       	andi	r24, 0xF8	; 248
     9d0:	88 32       	cpi	r24, 0x28	; 40
     9d2:	39 f0       	breq	.+14     	; 0x9e2 <IIC_WRITE+0xb0>
	{
		Lcd_Write_String(LINE2,"MT_DATA_ACK ERROR");
     9d4:	61 e1       	ldi	r22, 0x11	; 17
     9d6:	71 e0       	ldi	r23, 0x01	; 1
     9d8:	80 ec       	ldi	r24, 0xC0	; 192
     9da:	23 de       	rcall	.-954    	; 0x622 <Lcd_Write_String>
		error_code=TWSR & 0xF8;
     9dc:	80 91 b9 00 	lds	r24, 0x00B9
		goto write_error;
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <IIC_WRITE+0xb8>
	}
	TWCR =(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     9e2:	84 e9       	ldi	r24, 0x94	; 148
     9e4:	80 93 bc 00 	sts	0x00BC, r24
	return;
     9e8:	08 95       	ret
	
write_error	:

	TWCR =(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     9ea:	84 e9       	ldi	r24, 0x94	; 148
     9ec:	80 93 bc 00 	sts	0x00BC, r24
     9f0:	08 95       	ret

000009f2 <IIC_READ>:

unsigned char IIC_READ(unsigned char w_add,unsigned char r_add, unsigned char reg)
{
	unsigned char temp=0;
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     9f2:	94 ea       	ldi	r25, 0xA4	; 164
     9f4:	90 93 bc 00 	sts	0x00BC, r25
	while (!(TWCR &	(1<<TWINT)));
     9f8:	ec eb       	ldi	r30, 0xBC	; 188
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	90 81       	ld	r25, Z
     9fe:	99 23       	and	r25, r25
     a00:	ec f7       	brge	.-6      	; 0x9fc <IIC_READ+0xa>
	if ((TWSR & 0xF8) != START)
     a02:	90 91 b9 00 	lds	r25, 0x00B9
     a06:	98 7f       	andi	r25, 0xF8	; 248
     a08:	98 30       	cpi	r25, 0x08	; 8
     a0a:	41 f0       	breq	.+16     	; 0xa1c <IIC_READ+0x2a>
	{
		Lcd_Write_String(LINE2,"START ERROR");
     a0c:	65 e2       	ldi	r22, 0x25	; 37
     a0e:	71 e0       	ldi	r23, 0x01	; 1
     a10:	80 ec       	ldi	r24, 0xC0	; 192
     a12:	07 de       	rcall	.-1010   	; 0x622 <Lcd_Write_String>
		temp=TWSR & 0xF8;
     a14:	80 91 b9 00 	lds	r24, 0x00B9
     a18:	88 7f       	andi	r24, 0xF8	; 248
		goto read_error;
     a1a:	71 c0       	rjmp	.+226    	; 0xafe <IIC_READ+0x10c>
	}
	TWDR = w_add;
     a1c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) |	(1<<TWEN);
     a20:	84 e8       	ldi	r24, 0x84	; 132
     a22:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR &	(1<<TWINT)));
     a26:	ec eb       	ldi	r30, 0xBC	; 188
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	88 23       	and	r24, r24
     a2e:	ec f7       	brge	.-6      	; 0xa2a <IIC_READ+0x38>
	if ((TWSR & 0xF8) != MT_SLA_ACK)
     a30:	80 91 b9 00 	lds	r24, 0x00B9
     a34:	88 7f       	andi	r24, 0xF8	; 248
     a36:	88 31       	cpi	r24, 0x18	; 24
     a38:	41 f0       	breq	.+16     	; 0xa4a <IIC_READ+0x58>
	{
		Lcd_Write_String(LINE2,"MT_SLA_ACK ERROR");
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	71 e0       	ldi	r23, 0x01	; 1
     a3e:	80 ec       	ldi	r24, 0xC0	; 192
     a40:	f0 dd       	rcall	.-1056   	; 0x622 <Lcd_Write_String>
		temp=TWSR & 0xF8;
     a42:	80 91 b9 00 	lds	r24, 0x00B9
     a46:	88 7f       	andi	r24, 0xF8	; 248
		goto read_error;
     a48:	5a c0       	rjmp	.+180    	; 0xafe <IIC_READ+0x10c>
	}
	
	TWDR = reg;
     a4a:	40 93 bb 00 	sts	0x00BB, r20
	TWCR = (1<<TWINT) |	(1<<TWEN);
     a4e:	84 e8       	ldi	r24, 0x84	; 132
     a50:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR &	(1<<TWINT)));
     a54:	ec eb       	ldi	r30, 0xBC	; 188
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	88 23       	and	r24, r24
     a5c:	ec f7       	brge	.-6      	; 0xa58 <IIC_READ+0x66>
	if ((TWSR & 0xF8) !=MT_DATA_ACK)
     a5e:	80 91 b9 00 	lds	r24, 0x00B9
     a62:	88 7f       	andi	r24, 0xF8	; 248
     a64:	88 32       	cpi	r24, 0x28	; 40
     a66:	41 f0       	breq	.+16     	; 0xa78 <IIC_READ+0x86>
	{
		Lcd_Write_String(LINE2,"MT_DATA_ACK ERROR");
     a68:	61 e1       	ldi	r22, 0x11	; 17
     a6a:	71 e0       	ldi	r23, 0x01	; 1
     a6c:	80 ec       	ldi	r24, 0xC0	; 192
     a6e:	d9 dd       	rcall	.-1102   	; 0x622 <Lcd_Write_String>
		temp=TWSR & 0xF8;
     a70:	80 91 b9 00 	lds	r24, 0x00B9
     a74:	88 7f       	andi	r24, 0xF8	; 248
		goto read_error;
     a76:	43 c0       	rjmp	.+134    	; 0xafe <IIC_READ+0x10c>
	}
			
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//REPEAT START
     a78:	84 ea       	ldi	r24, 0xA4	; 164
     a7a:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR &	(1<<TWINT)));
     a7e:	ec eb       	ldi	r30, 0xBC	; 188
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	80 81       	ld	r24, Z
     a84:	88 23       	and	r24, r24
     a86:	ec f7       	brge	.-6      	; 0xa82 <IIC_READ+0x90>
	if ((TWSR & 0xF8) != RE_START)
     a88:	80 91 b9 00 	lds	r24, 0x00B9
     a8c:	88 7f       	andi	r24, 0xF8	; 248
     a8e:	80 31       	cpi	r24, 0x10	; 16
     a90:	41 f0       	breq	.+16     	; 0xaa2 <IIC_READ+0xb0>
	{
		Lcd_Write_String(LINE2,"RESTART ERROR");
     a92:	63 e2       	ldi	r22, 0x23	; 35
     a94:	71 e0       	ldi	r23, 0x01	; 1
     a96:	80 ec       	ldi	r24, 0xC0	; 192
     a98:	c4 dd       	rcall	.-1144   	; 0x622 <Lcd_Write_String>
		temp=TWSR & 0xF8;
     a9a:	80 91 b9 00 	lds	r24, 0x00B9
     a9e:	88 7f       	andi	r24, 0xF8	; 248
		goto read_error;
     aa0:	2e c0       	rjmp	.+92     	; 0xafe <IIC_READ+0x10c>
	}
	TWDR = r_add;
     aa2:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) |	(1<<TWEN);
     aa6:	84 e8       	ldi	r24, 0x84	; 132
     aa8:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR &	(1<<TWINT)));
     aac:	ec eb       	ldi	r30, 0xBC	; 188
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	88 23       	and	r24, r24
     ab4:	ec f7       	brge	.-6      	; 0xab0 <IIC_READ+0xbe>
	if ((TWSR & 0xF8) !=MR_SLA_ACK)
     ab6:	80 91 b9 00 	lds	r24, 0x00B9
     aba:	88 7f       	andi	r24, 0xF8	; 248
     abc:	80 34       	cpi	r24, 0x40	; 64
     abe:	41 f0       	breq	.+16     	; 0xad0 <IIC_READ+0xde>
	{
		Lcd_Write_String(LINE2,"MR_SLA_ACK ERROR");
     ac0:	61 e3       	ldi	r22, 0x31	; 49
     ac2:	71 e0       	ldi	r23, 0x01	; 1
     ac4:	80 ec       	ldi	r24, 0xC0	; 192
     ac6:	ad dd       	rcall	.-1190   	; 0x622 <Lcd_Write_String>
		temp=TWSR & 0xF8;
     ac8:	80 91 b9 00 	lds	r24, 0x00B9
     acc:	88 7f       	andi	r24, 0xF8	; 248
		goto read_error;
     ace:	17 c0       	rjmp	.+46     	; 0xafe <IIC_READ+0x10c>
	}
			
	TWCR = (1<<TWINT) |	(1<<TWEN);
     ad0:	84 e8       	ldi	r24, 0x84	; 132
     ad2:	80 93 bc 00 	sts	0x00BC, r24
				
	while (!(TWCR &	(1<<TWINT)));
     ad6:	ec eb       	ldi	r30, 0xBC	; 188
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	88 23       	and	r24, r24
     ade:	ec f7       	brge	.-6      	; 0xada <IIC_READ+0xe8>
	if ((TWSR & 0xF8) !=MR_DATA_NOACK)
     ae0:	80 91 b9 00 	lds	r24, 0x00B9
     ae4:	88 7f       	andi	r24, 0xF8	; 248
     ae6:	88 35       	cpi	r24, 0x58	; 88
     ae8:	41 f0       	breq	.+16     	; 0xafa <IIC_READ+0x108>
	{
		Lcd_Write_String(LINE2,"MR_DATA_NOACK ERROR");
     aea:	62 e4       	ldi	r22, 0x42	; 66
     aec:	71 e0       	ldi	r23, 0x01	; 1
     aee:	80 ec       	ldi	r24, 0xC0	; 192
     af0:	98 dd       	rcall	.-1232   	; 0x622 <Lcd_Write_String>
		temp=TWSR & 0xF8;
     af2:	80 91 b9 00 	lds	r24, 0x00B9
     af6:	88 7f       	andi	r24, 0xF8	; 248
		goto read_error;
     af8:	02 c0       	rjmp	.+4      	; 0xafe <IIC_READ+0x10c>
	}
	temp=TWDR;
     afa:	80 91 bb 00 	lds	r24, 0x00BB
	
read_error:
	TWCR =(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     afe:	94 e9       	ldi	r25, 0x94	; 148
     b00:	90 93 bc 00 	sts	0x00BC, r25
	return temp;
}
     b04:	08 95       	ret

00000b06 <read_compass>:

void read_compass(void)
{
     b06:	cf 92       	push	r12
     b08:	df 92       	push	r13
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
	int x,y;

	x=IIC_READ(SLA_W,SLA_R,0x03);
     b16:	43 e0       	ldi	r20, 0x03	; 3
     b18:	6d e3       	ldi	r22, 0x3D	; 61
     b1a:	8c e3       	ldi	r24, 0x3C	; 60
     b1c:	6a df       	rcall	.-300    	; 0x9f2 <IIC_READ>
     b1e:	c8 2f       	mov	r28, r24
	delay20us(1);
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	10 db       	rcall	.-2528   	; 0x146 <delay20us>

void read_compass(void)
{
	int x,y;

	x=IIC_READ(SLA_W,SLA_R,0x03);
     b26:	d0 e0       	ldi	r29, 0x00	; 0
	delay20us(1);
	x=(x<<8) + IIC_READ(SLA_W,SLA_R,0x04);
     b28:	dc 2f       	mov	r29, r28
     b2a:	cc 27       	eor	r28, r28
     b2c:	44 e0       	ldi	r20, 0x04	; 4
     b2e:	6d e3       	ldi	r22, 0x3D	; 61
     b30:	8c e3       	ldi	r24, 0x3C	; 60
     b32:	5f df       	rcall	.-322    	; 0x9f2 <IIC_READ>
     b34:	c8 0f       	add	r28, r24
     b36:	d1 1d       	adc	r29, r1
	delay20us(1);
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	04 db       	rcall	.-2552   	; 0x146 <delay20us>
	y=IIC_READ(SLA_W,SLA_R,0x05);
     b3e:	45 e0       	ldi	r20, 0x05	; 5
     b40:	6d e3       	ldi	r22, 0x3D	; 61
     b42:	8c e3       	ldi	r24, 0x3C	; 60
     b44:	56 df       	rcall	.-340    	; 0x9f2 <IIC_READ>
	delay20us(1);
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	fd da       	rcall	.-2566   	; 0x146 <delay20us>
	y=(y<<8) + IIC_READ(SLA_W,SLA_R,0x06);
     b4c:	46 e0       	ldi	r20, 0x06	; 6
     b4e:	6d e3       	ldi	r22, 0x3D	; 61
     b50:	8c e3       	ldi	r24, 0x3C	; 60
     b52:	4f df       	rcall	.-354    	; 0x9f2 <IIC_READ>
	delay20us(1);
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	f6 da       	rcall	.-2580   	; 0x146 <delay20us>
	y=IIC_READ(SLA_W,SLA_R,0x07);
     b5a:	47 e0       	ldi	r20, 0x07	; 7
     b5c:	6d e3       	ldi	r22, 0x3D	; 61
     b5e:	8c e3       	ldi	r24, 0x3C	; 60
     b60:	48 df       	rcall	.-368    	; 0x9f2 <IIC_READ>
     b62:	08 2f       	mov	r16, r24
	delay20us(1);
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	ee da       	rcall	.-2596   	; 0x146 <delay20us>
	delay20us(1);
	y=IIC_READ(SLA_W,SLA_R,0x05);
	delay20us(1);
	y=(y<<8) + IIC_READ(SLA_W,SLA_R,0x06);
	delay20us(1);
	y=IIC_READ(SLA_W,SLA_R,0x07);
     b6a:	10 e0       	ldi	r17, 0x00	; 0
	delay20us(1);
	y=(y<<8) + IIC_READ(SLA_W,SLA_R,0x08);
     b6c:	10 2f       	mov	r17, r16
     b6e:	00 27       	eor	r16, r16
     b70:	48 e0       	ldi	r20, 0x08	; 8
     b72:	6d e3       	ldi	r22, 0x3D	; 61
     b74:	8c e3       	ldi	r24, 0x3C	; 60
     b76:	3d df       	rcall	.-390    	; 0x9f2 <IIC_READ>
     b78:	08 0f       	add	r16, r24
     b7a:	11 1d       	adc	r17, r1
	delay20us(1);
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	e2 da       	rcall	.-2620   	; 0x146 <delay20us>
	compass = (atan2((double)y,(double)x) * (180 / 3.14159265) + 180)*10; // angle in degrees
     b82:	be 01       	movw	r22, r28
     b84:	dd 0f       	add	r29, r29
     b86:	88 0b       	sbc	r24, r24
     b88:	99 0b       	sbc	r25, r25
     b8a:	ac d6       	rcall	.+3416   	; 0x18e4 <__floatsisf>
     b8c:	6b 01       	movw	r12, r22
     b8e:	7c 01       	movw	r14, r24
     b90:	b8 01       	movw	r22, r16
     b92:	11 0f       	add	r17, r17
     b94:	88 0b       	sbc	r24, r24
     b96:	99 0b       	sbc	r25, r25
     b98:	a5 d6       	rcall	.+3402   	; 0x18e4 <__floatsisf>
     b9a:	a7 01       	movw	r20, r14
     b9c:	96 01       	movw	r18, r12
     b9e:	b6 d5       	rcall	.+2924   	; 0x170c <atan2>
     ba0:	20 ee       	ldi	r18, 0xE0	; 224
     ba2:	3e e2       	ldi	r19, 0x2E	; 46
     ba4:	45 e6       	ldi	r20, 0x65	; 101
     ba6:	52 e4       	ldi	r21, 0x42	; 66
     ba8:	55 d7       	rcall	.+3754   	; 0x1a54 <__mulsf3>
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	44 e3       	ldi	r20, 0x34	; 52
     bb0:	53 e4       	ldi	r21, 0x43	; 67
     bb2:	39 d5       	rcall	.+2674   	; 0x1626 <__addsf3>
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	40 e2       	ldi	r20, 0x20	; 32
     bba:	51 e4       	ldi	r21, 0x41	; 65
     bbc:	4b d7       	rcall	.+3734   	; 0x1a54 <__mulsf3>
     bbe:	60 93 8c 02 	sts	0x028C, r22
     bc2:	70 93 8d 02 	sts	0x028D, r23
     bc6:	80 93 8e 02 	sts	0x028E, r24
     bca:	90 93 8f 02 	sts	0x028F, r25
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	df 90       	pop	r13
     bdc:	cf 90       	pop	r12
     bde:	08 95       	ret

00000be0 <WarningDisplay>:
#include "SOCCER.h"


void WarningDisplay()
{
	OCR1A = 0;
     be0:	10 92 89 00 	sts	0x0089, r1
     be4:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     be8:	10 92 8b 00 	sts	0x008B, r1
     bec:	10 92 8a 00 	sts	0x008A, r1
	OCR2B = 0;
     bf0:	10 92 b4 00 	sts	0x00B4, r1
	Lcd_Init();
     bf4:	03 dd       	rcall	.-1530   	; 0x5fc <Lcd_Init>
	Lcd_Write_String(LINE1,"-WARNING-");
     bf6:	66 e5       	ldi	r22, 0x56	; 86
     bf8:	71 e0       	ldi	r23, 0x01	; 1
     bfa:	80 e8       	ldi	r24, 0x80	; 128
     bfc:	12 dd       	rcall	.-1500   	; 0x622 <Lcd_Write_String>
	Lcd_Write_String(LINE2,"  LOW BATTERY");
     bfe:	60 e6       	ldi	r22, 0x60	; 96
     c00:	71 e0       	ldi	r23, 0x01	; 1
     c02:	80 ec       	ldi	r24, 0xC0	; 192
     c04:	0e dd       	rcall	.-1508   	; 0x622 <Lcd_Write_String>
	while(1)
		Volt_Display();
     c06:	2e de       	rcall	.-932    	; 0x864 <Volt_Display>
     c08:	fe cf       	rjmp	.-4      	; 0xc06 <WarningDisplay+0x26>

00000c0a <MOTORA>:
}
void MOTORA(int ma)
{
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	ec 01       	movw	r28, r24
	int tmp = abs(ma);
     c14:	8c 01       	movw	r16, r24
     c16:	99 23       	and	r25, r25
     c18:	24 f4       	brge	.+8      	; 0xc22 <MOTORA+0x18>
     c1a:	00 27       	eor	r16, r16
     c1c:	11 27       	eor	r17, r17
     c1e:	08 1b       	sub	r16, r24
     c20:	19 0b       	sbc	r17, r25
	if((int)voltage < 95)
     c22:	60 91 6c 02 	lds	r22, 0x026C
     c26:	70 91 6d 02 	lds	r23, 0x026D
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	58 d6       	rcall	.+3248   	; 0x18e0 <__floatunsisf>
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e2       	ldi	r20, 0x20	; 32
     c36:	5f e3       	ldi	r21, 0x3F	; 63
     c38:	0d d7       	rcall	.+3610   	; 0x1a54 <__mulsf3>
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 e2       	ldi	r20, 0x20	; 32
     c40:	50 e4       	ldi	r21, 0x40	; 64
     c42:	f0 d4       	rcall	.+2528   	; 0x1624 <__subsf3>
     c44:	1c d6       	rcall	.+3128   	; 0x187e <__fixsfsi>
     c46:	6f 35       	cpi	r22, 0x5F	; 95
     c48:	71 05       	cpc	r23, r1
     c4a:	0c f4       	brge	.+2      	; 0xc4e <MOTORA+0x44>
	{
		WarningDisplay();
     c4c:	c9 df       	rcall	.-110    	; 0xbe0 <WarningDisplay>
	}
	else
	{
		tmp=tmp*255/100;
     c4e:	2f ef       	ldi	r18, 0xFF	; 255
     c50:	20 9f       	mul	r18, r16
     c52:	c0 01       	movw	r24, r0
     c54:	21 9f       	mul	r18, r17
     c56:	90 0d       	add	r25, r0
     c58:	11 24       	eor	r1, r1
     c5a:	64 e6       	ldi	r22, 0x64	; 100
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	62 d7       	rcall	.+3780   	; 0x1b24 <__divmodhi4>
     c60:	6f 3f       	cpi	r22, 0xFF	; 255
     c62:	71 05       	cpc	r23, r1
     c64:	19 f0       	breq	.+6      	; 0xc6c <MOTORA+0x62>
     c66:	14 f0       	brlt	.+4      	; 0xc6c <MOTORA+0x62>
     c68:	6f ef       	ldi	r22, 0xFF	; 255
     c6a:	70 e0       	ldi	r23, 0x00	; 0
		if(tmp>255)	tmp=255;
		
		if(ma<0)	madirB;
     c6c:	dd 23       	and	r29, r29
     c6e:	34 f4       	brge	.+12     	; 0xc7c <MOTORA+0x72>
     c70:	80 91 45 02 	lds	r24, 0x0245
     c74:	80 62       	ori	r24, 0x20	; 32
     c76:	80 93 45 02 	sts	0x0245, r24
     c7a:	05 c0       	rjmp	.+10     	; 0xc86 <MOTORA+0x7c>
		else		madirF;
     c7c:	80 91 45 02 	lds	r24, 0x0245
     c80:	8f 7d       	andi	r24, 0xDF	; 223
     c82:	80 93 45 02 	sts	0x0245, r24
		OCR1A = tmp;
     c86:	70 93 89 00 	sts	0x0089, r23
     c8a:	60 93 88 00 	sts	0x0088, r22
	}
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	08 95       	ret

00000c98 <MOTORB>:
void MOTORB(int mb)
{
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	ec 01       	movw	r28, r24
	int tmp = abs(mb);
     ca2:	9c 01       	movw	r18, r24
     ca4:	99 23       	and	r25, r25
     ca6:	24 f4       	brge	.+8      	; 0xcb0 <MOTORB+0x18>
     ca8:	22 27       	eor	r18, r18
     caa:	33 27       	eor	r19, r19
     cac:	28 1b       	sub	r18, r24
     cae:	39 0b       	sbc	r19, r25
	
	tmp=tmp*255/100;
     cb0:	4f ef       	ldi	r20, 0xFF	; 255
     cb2:	42 9f       	mul	r20, r18
     cb4:	c0 01       	movw	r24, r0
     cb6:	43 9f       	mul	r20, r19
     cb8:	90 0d       	add	r25, r0
     cba:	11 24       	eor	r1, r1
     cbc:	64 e6       	ldi	r22, 0x64	; 100
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	31 d7       	rcall	.+3682   	; 0x1b24 <__divmodhi4>
     cc2:	8b 01       	movw	r16, r22
     cc4:	6f 3f       	cpi	r22, 0xFF	; 255
     cc6:	71 05       	cpc	r23, r1
     cc8:	19 f0       	breq	.+6      	; 0xcd0 <MOTORB+0x38>
     cca:	14 f0       	brlt	.+4      	; 0xcd0 <MOTORB+0x38>
     ccc:	0f ef       	ldi	r16, 0xFF	; 255
     cce:	10 e0       	ldi	r17, 0x00	; 0
	if(tmp>255)	tmp=255;
	if((int)voltage < 95)
     cd0:	60 91 6c 02 	lds	r22, 0x026C
     cd4:	70 91 6d 02 	lds	r23, 0x026D
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	01 d6       	rcall	.+3074   	; 0x18e0 <__floatunsisf>
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e2       	ldi	r20, 0x20	; 32
     ce4:	5f e3       	ldi	r21, 0x3F	; 63
     ce6:	b6 d6       	rcall	.+3436   	; 0x1a54 <__mulsf3>
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e2       	ldi	r20, 0x20	; 32
     cee:	50 e4       	ldi	r21, 0x40	; 64
     cf0:	99 d4       	rcall	.+2354   	; 0x1624 <__subsf3>
     cf2:	c5 d5       	rcall	.+2954   	; 0x187e <__fixsfsi>
     cf4:	6f 35       	cpi	r22, 0x5F	; 95
     cf6:	71 05       	cpc	r23, r1
     cf8:	0c f4       	brge	.+2      	; 0xcfc <MOTORB+0x64>
	{
		WarningDisplay();
     cfa:	72 df       	rcall	.-284    	; 0xbe0 <WarningDisplay>
	}
	else
	{
		if(mb<0)	mbdirB;
     cfc:	dd 23       	and	r29, r29
     cfe:	34 f4       	brge	.+12     	; 0xd0c <MOTORB+0x74>
     d00:	80 91 45 02 	lds	r24, 0x0245
     d04:	80 64       	ori	r24, 0x40	; 64
     d06:	80 93 45 02 	sts	0x0245, r24
     d0a:	05 c0       	rjmp	.+10     	; 0xd16 <MOTORB+0x7e>
		else		mbdirF;
     d0c:	80 91 45 02 	lds	r24, 0x0245
     d10:	8f 7b       	andi	r24, 0xBF	; 191
     d12:	80 93 45 02 	sts	0x0245, r24
		OCR1B = tmp;
     d16:	10 93 8b 00 	sts	0x008B, r17
     d1a:	00 93 8a 00 	sts	0x008A, r16
	}
}
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	08 95       	ret

00000d28 <MOTORC>:
void MOTORC(int mc)
{
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	ec 01       	movw	r28, r24
	int tmp = abs(mc);
     d32:	9c 01       	movw	r18, r24
     d34:	99 23       	and	r25, r25
     d36:	24 f4       	brge	.+8      	; 0xd40 <MOTORC+0x18>
     d38:	22 27       	eor	r18, r18
     d3a:	33 27       	eor	r19, r19
     d3c:	28 1b       	sub	r18, r24
     d3e:	39 0b       	sbc	r19, r25
	
	tmp=tmp*255/100;
     d40:	4f ef       	ldi	r20, 0xFF	; 255
     d42:	42 9f       	mul	r20, r18
     d44:	c0 01       	movw	r24, r0
     d46:	43 9f       	mul	r20, r19
     d48:	90 0d       	add	r25, r0
     d4a:	11 24       	eor	r1, r1
     d4c:	64 e6       	ldi	r22, 0x64	; 100
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	e9 d6       	rcall	.+3538   	; 0x1b24 <__divmodhi4>
     d52:	8b 01       	movw	r16, r22
     d54:	6f 3f       	cpi	r22, 0xFF	; 255
     d56:	71 05       	cpc	r23, r1
     d58:	19 f0       	breq	.+6      	; 0xd60 <MOTORC+0x38>
     d5a:	14 f0       	brlt	.+4      	; 0xd60 <MOTORC+0x38>
     d5c:	0f ef       	ldi	r16, 0xFF	; 255
     d5e:	10 e0       	ldi	r17, 0x00	; 0
	if(tmp>255)	tmp=255;
	if((int)voltage < 95)
     d60:	60 91 6c 02 	lds	r22, 0x026C
     d64:	70 91 6d 02 	lds	r23, 0x026D
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	b9 d5       	rcall	.+2930   	; 0x18e0 <__floatunsisf>
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e2       	ldi	r20, 0x20	; 32
     d74:	5f e3       	ldi	r21, 0x3F	; 63
     d76:	6e d6       	rcall	.+3292   	; 0x1a54 <__mulsf3>
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e2       	ldi	r20, 0x20	; 32
     d7e:	50 e4       	ldi	r21, 0x40	; 64
     d80:	51 d4       	rcall	.+2210   	; 0x1624 <__subsf3>
     d82:	7d d5       	rcall	.+2810   	; 0x187e <__fixsfsi>
     d84:	6f 35       	cpi	r22, 0x5F	; 95
     d86:	71 05       	cpc	r23, r1
     d88:	0c f4       	brge	.+2      	; 0xd8c <MOTORC+0x64>
	{
		WarningDisplay();
     d8a:	2a df       	rcall	.-428    	; 0xbe0 <WarningDisplay>
	}
	else
	{
		if(mc<0)	mcdirB;
     d8c:	dd 23       	and	r29, r29
     d8e:	34 f4       	brge	.+12     	; 0xd9c <MOTORC+0x74>
     d90:	80 91 45 02 	lds	r24, 0x0245
     d94:	80 68       	ori	r24, 0x80	; 128
     d96:	80 93 45 02 	sts	0x0245, r24
     d9a:	05 c0       	rjmp	.+10     	; 0xda6 <MOTORC+0x7e>
		else		mcdirF;
     d9c:	80 91 45 02 	lds	r24, 0x0245
     da0:	8f 77       	andi	r24, 0x7F	; 127
     da2:	80 93 45 02 	sts	0x0245, r24
		OCR2B = tmp;
     da6:	00 93 b4 00 	sts	0x00B4, r16
	}
}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <move>:

void move(int ma, int mb, int mc)
{
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	8b 01       	movw	r16, r22
     dbe:	ea 01       	movw	r28, r20
	MOTORA(ma);
     dc0:	24 df       	rcall	.-440    	; 0xc0a <MOTORA>
	MOTORB(mb);
     dc2:	c8 01       	movw	r24, r16
     dc4:	69 df       	rcall	.-302    	; 0xc98 <MOTORB>
	MOTORC(mc);	
     dc6:	ce 01       	movw	r24, r28
     dc8:	af df       	rcall	.-162    	; 0xd28 <MOTORC>
}
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	08 95       	ret

00000dd4 <compass_move>:

void compass_move(int ma, int mb, int mc)
{
     dd4:	4f 92       	push	r4
     dd6:	5f 92       	push	r5
     dd8:	6f 92       	push	r6
     dda:	7f 92       	push	r7
     ddc:	8f 92       	push	r8
     dde:	9f 92       	push	r9
     de0:	af 92       	push	r10
     de2:	bf 92       	push	r11
     de4:	cf 92       	push	r12
     de6:	df 92       	push	r13
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	ec 01       	movw	r28, r24
     df6:	8b 01       	movw	r16, r22
     df8:	7a 01       	movw	r14, r20
	int comp;
	read_compass();
     dfa:	85 de       	rcall	.-758    	; 0xb06 <read_compass>
	comp = (int)compass / 10;
     dfc:	60 91 8c 02 	lds	r22, 0x028C
     e00:	70 91 8d 02 	lds	r23, 0x028D
     e04:	80 91 8e 02 	lds	r24, 0x028E
     e08:	90 91 8f 02 	lds	r25, 0x028F
     e0c:	38 d5       	rcall	.+2672   	; 0x187e <__fixsfsi>
     e0e:	cb 01       	movw	r24, r22
     e10:	6a e0       	ldi	r22, 0x0A	; 10
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	87 d6       	rcall	.+3342   	; 0x1b24 <__divmodhi4>
	comp = comp - 180;
     e16:	64 5b       	subi	r22, 0xB4	; 180
     e18:	71 09       	sbc	r23, r1
	if (comp > 100)
     e1a:	65 36       	cpi	r22, 0x65	; 101
     e1c:	71 05       	cpc	r23, r1
     e1e:	44 f0       	brlt	.+16     	; 0xe30 <compass_move+0x5c>
	{
		move(90, 90, 90);
     e20:	4a e5       	ldi	r20, 0x5A	; 90
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	6a e5       	ldi	r22, 0x5A	; 90
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	8a e5       	ldi	r24, 0x5A	; 90
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	c3 df       	rcall	.-122    	; 0xdb4 <move>
     e2e:	40 c0       	rjmp	.+128    	; 0xeb0 <compass_move+0xdc>
	} 
	else if(comp < -100)
     e30:	6c 39       	cpi	r22, 0x9C	; 156
     e32:	8f ef       	ldi	r24, 0xFF	; 255
     e34:	78 07       	cpc	r23, r24
     e36:	44 f4       	brge	.+16     	; 0xe48 <compass_move+0x74>
	{
		move(-90, -90, -90);
     e38:	46 ea       	ldi	r20, 0xA6	; 166
     e3a:	5f ef       	ldi	r21, 0xFF	; 255
     e3c:	66 ea       	ldi	r22, 0xA6	; 166
     e3e:	7f ef       	ldi	r23, 0xFF	; 255
     e40:	86 ea       	ldi	r24, 0xA6	; 166
     e42:	9f ef       	ldi	r25, 0xFF	; 255
     e44:	b7 df       	rcall	.-146    	; 0xdb4 <move>
     e46:	34 c0       	rjmp	.+104    	; 0xeb0 <compass_move+0xdc>
	}
	else
	{
		move(ma+comp*KP, mb+comp*KP, mc+comp*KP);
     e48:	07 2e       	mov	r0, r23
     e4a:	00 0c       	add	r0, r0
     e4c:	88 0b       	sbc	r24, r24
     e4e:	99 0b       	sbc	r25, r25
     e50:	49 d5       	rcall	.+2706   	; 0x18e4 <__floatsisf>
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	5f e3       	ldi	r21, 0x3F	; 63
     e5a:	fc d5       	rcall	.+3064   	; 0x1a54 <__mulsf3>
     e5c:	4b 01       	movw	r8, r22
     e5e:	5c 01       	movw	r10, r24
     e60:	b7 01       	movw	r22, r14
     e62:	ff 0c       	add	r15, r15
     e64:	88 0b       	sbc	r24, r24
     e66:	99 0b       	sbc	r25, r25
     e68:	3d d5       	rcall	.+2682   	; 0x18e4 <__floatsisf>
     e6a:	a5 01       	movw	r20, r10
     e6c:	94 01       	movw	r18, r8
     e6e:	db d3       	rcall	.+1974   	; 0x1626 <__addsf3>
     e70:	06 d5       	rcall	.+2572   	; 0x187e <__fixsfsi>
     e72:	6b 01       	movw	r12, r22
     e74:	7c 01       	movw	r14, r24
     e76:	b8 01       	movw	r22, r16
     e78:	11 0f       	add	r17, r17
     e7a:	88 0b       	sbc	r24, r24
     e7c:	99 0b       	sbc	r25, r25
     e7e:	32 d5       	rcall	.+2660   	; 0x18e4 <__floatsisf>
     e80:	9b 01       	movw	r18, r22
     e82:	ac 01       	movw	r20, r24
     e84:	c5 01       	movw	r24, r10
     e86:	b4 01       	movw	r22, r8
     e88:	ce d3       	rcall	.+1948   	; 0x1626 <__addsf3>
     e8a:	f9 d4       	rcall	.+2546   	; 0x187e <__fixsfsi>
     e8c:	2b 01       	movw	r4, r22
     e8e:	3c 01       	movw	r6, r24
     e90:	be 01       	movw	r22, r28
     e92:	dd 0f       	add	r29, r29
     e94:	88 0b       	sbc	r24, r24
     e96:	99 0b       	sbc	r25, r25
     e98:	25 d5       	rcall	.+2634   	; 0x18e4 <__floatsisf>
     e9a:	9b 01       	movw	r18, r22
     e9c:	ac 01       	movw	r20, r24
     e9e:	c5 01       	movw	r24, r10
     ea0:	b4 01       	movw	r22, r8
     ea2:	c1 d3       	rcall	.+1922   	; 0x1626 <__addsf3>
     ea4:	ec d4       	rcall	.+2520   	; 0x187e <__fixsfsi>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	a6 01       	movw	r20, r12
     eac:	b2 01       	movw	r22, r4
     eae:	82 df       	rcall	.-252    	; 0xdb4 <move>
	}
}
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	bf 90       	pop	r11
     ec2:	af 90       	pop	r10
     ec4:	9f 90       	pop	r9
     ec6:	8f 90       	pop	r8
     ec8:	7f 90       	pop	r7
     eca:	6f 90       	pop	r6
     ecc:	5f 90       	pop	r5
     ece:	4f 90       	pop	r4
     ed0:	08 95       	ret

00000ed2 <dir_move>:

void dir_move(int input_ball, int power)
{
	switch(input_ball)
     ed2:	8c 30       	cpi	r24, 0x0C	; 12
     ed4:	91 05       	cpc	r25, r1
     ed6:	08 f0       	brcs	.+2      	; 0xeda <dir_move+0x8>
     ed8:	84 c0       	rjmp	.+264    	; 0xfe2 <dir_move+0x110>
     eda:	9b 01       	movw	r18, r22
     edc:	fc 01       	movw	r30, r24
     ede:	ea 5b       	subi	r30, 0xBA	; 186
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	33 c6       	rjmp	.+3174   	; 0x1b4a <__tablejump2__>
	{
		case 0:
		compass_move(power, 0, -power);
     ee4:	44 27       	eor	r20, r20
     ee6:	55 27       	eor	r21, r21
     ee8:	46 1b       	sub	r20, r22
     eea:	57 0b       	sbc	r21, r23
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	c9 01       	movw	r24, r18
     ef2:	70 cf       	rjmp	.-288    	; 0xdd4 <compass_move>
		break;
     ef4:	08 95       	ret
		case 1:
		compass_move(power/2, power/2, -power);
     ef6:	cb 01       	movw	r24, r22
     ef8:	77 23       	and	r23, r23
     efa:	0c f4       	brge	.+2      	; 0xefe <dir_move+0x2c>
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	95 95       	asr	r25
     f00:	87 95       	ror	r24
     f02:	44 27       	eor	r20, r20
     f04:	55 27       	eor	r21, r21
     f06:	42 1b       	sub	r20, r18
     f08:	53 0b       	sbc	r21, r19
     f0a:	bc 01       	movw	r22, r24
     f0c:	63 cf       	rjmp	.-314    	; 0xdd4 <compass_move>
		break;
     f0e:	08 95       	ret
		case 2:
		compass_move(0, power, -power);
     f10:	44 27       	eor	r20, r20
     f12:	55 27       	eor	r21, r21
     f14:	46 1b       	sub	r20, r22
     f16:	57 0b       	sbc	r21, r23
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	5b cf       	rjmp	.-330    	; 0xdd4 <compass_move>
		break;
     f1e:	08 95       	ret
		case 3:
		compass_move(-power/2, power, -power/2);
     f20:	88 27       	eor	r24, r24
     f22:	99 27       	eor	r25, r25
     f24:	86 1b       	sub	r24, r22
     f26:	97 0b       	sbc	r25, r23
     f28:	0a f4       	brpl	.+2      	; 0xf2c <dir_move+0x5a>
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	95 95       	asr	r25
     f2e:	87 95       	ror	r24
     f30:	ac 01       	movw	r20, r24
     f32:	b9 01       	movw	r22, r18
     f34:	4f cf       	rjmp	.-354    	; 0xdd4 <compass_move>
		break;
     f36:	08 95       	ret
		case 4:
		compass_move(-power, power, 0);
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	88 27       	eor	r24, r24
     f3e:	99 27       	eor	r25, r25
     f40:	82 1b       	sub	r24, r18
     f42:	93 0b       	sbc	r25, r19
     f44:	47 cf       	rjmp	.-370    	; 0xdd4 <compass_move>
		break;
     f46:	08 95       	ret
		case 5:
		compass_move(-power, power/2, power/2);
     f48:	33 23       	and	r19, r19
     f4a:	14 f4       	brge	.+4      	; 0xf50 <dir_move+0x7e>
     f4c:	6f 5f       	subi	r22, 0xFF	; 255
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	75 95       	asr	r23
     f52:	67 95       	ror	r22
     f54:	ab 01       	movw	r20, r22
     f56:	88 27       	eor	r24, r24
     f58:	99 27       	eor	r25, r25
     f5a:	82 1b       	sub	r24, r18
     f5c:	93 0b       	sbc	r25, r19
     f5e:	3a cf       	rjmp	.-396    	; 0xdd4 <compass_move>
		break;
     f60:	08 95       	ret
		case 6:
		compass_move(-power, 0, power);
     f62:	ab 01       	movw	r20, r22
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	88 27       	eor	r24, r24
     f6a:	99 27       	eor	r25, r25
     f6c:	82 1b       	sub	r24, r18
     f6e:	93 0b       	sbc	r25, r19
     f70:	31 cf       	rjmp	.-414    	; 0xdd4 <compass_move>
		break;
     f72:	08 95       	ret
		case 7:
		compass_move(-power/2, -power/2, power);
     f74:	88 27       	eor	r24, r24
     f76:	99 27       	eor	r25, r25
     f78:	86 1b       	sub	r24, r22
     f7a:	97 0b       	sbc	r25, r23
     f7c:	0a f4       	brpl	.+2      	; 0xf80 <dir_move+0xae>
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	95 95       	asr	r25
     f82:	87 95       	ror	r24
     f84:	a9 01       	movw	r20, r18
     f86:	bc 01       	movw	r22, r24
     f88:	25 cf       	rjmp	.-438    	; 0xdd4 <compass_move>
		break;
     f8a:	08 95       	ret
		case 8:
		compass_move(0, -power, power);
     f8c:	66 27       	eor	r22, r22
     f8e:	77 27       	eor	r23, r23
     f90:	62 1b       	sub	r22, r18
     f92:	73 0b       	sbc	r23, r19
     f94:	a9 01       	movw	r20, r18
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	1c cf       	rjmp	.-456    	; 0xdd4 <compass_move>
		break;
     f9c:	08 95       	ret
		case 9:
		compass_move(power/2,- power, power/2);
     f9e:	cb 01       	movw	r24, r22
     fa0:	77 23       	and	r23, r23
     fa2:	0c f4       	brge	.+2      	; 0xfa6 <dir_move+0xd4>
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	95 95       	asr	r25
     fa8:	87 95       	ror	r24
     faa:	66 27       	eor	r22, r22
     fac:	77 27       	eor	r23, r23
     fae:	62 1b       	sub	r22, r18
     fb0:	73 0b       	sbc	r23, r19
     fb2:	ac 01       	movw	r20, r24
     fb4:	0f cf       	rjmp	.-482    	; 0xdd4 <compass_move>
		break;
     fb6:	08 95       	ret
		case 10:
		compass_move(power, -power, 0);
     fb8:	66 27       	eor	r22, r22
     fba:	77 27       	eor	r23, r23
     fbc:	62 1b       	sub	r22, r18
     fbe:	73 0b       	sbc	r23, r19
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	c9 01       	movw	r24, r18
     fc6:	06 cf       	rjmp	.-500    	; 0xdd4 <compass_move>
		break;
     fc8:	08 95       	ret
		case 11:
		compass_move(power, -power/2, -power/2);
     fca:	66 27       	eor	r22, r22
     fcc:	77 27       	eor	r23, r23
     fce:	62 1b       	sub	r22, r18
     fd0:	73 0b       	sbc	r23, r19
     fd2:	12 f4       	brpl	.+4      	; 0xfd8 <dir_move+0x106>
     fd4:	6f 5f       	subi	r22, 0xFF	; 255
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	75 95       	asr	r23
     fda:	67 95       	ror	r22
     fdc:	ab 01       	movw	r20, r22
     fde:	c9 01       	movw	r24, r18
     fe0:	f9 ce       	rjmp	.-526    	; 0xdd4 <compass_move>
     fe2:	08 95       	ret

00000fe4 <ball_near>:
	}
}

void ball_near(int dir, int power)
{
	switch(dir)
     fe4:	8c 30       	cpi	r24, 0x0C	; 12
     fe6:	91 05       	cpc	r25, r1
     fe8:	08 f0       	brcs	.+2      	; 0xfec <ball_near+0x8>
     fea:	3d c0       	rjmp	.+122    	; 0x1066 <ball_near+0x82>
     fec:	fc 01       	movw	r30, r24
     fee:	ee 5a       	subi	r30, 0xAE	; 174
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	ab c5       	rjmp	.+2902   	; 0x1b4a <__tablejump2__>
	{
		case 0:
		if(last_pos == 1)
     ff4:	80 91 47 02 	lds	r24, 0x0247
     ff8:	90 91 48 02 	lds	r25, 0x0248
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	21 f4       	brne	.+8      	; 0x1008 <ball_near+0x24>
			dir_move(11, power);
    1000:	8b e0       	ldi	r24, 0x0B	; 11
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	66 cf       	rjmp	.-308    	; 0xed2 <dir_move>
    1006:	08 95       	ret
		else
			dir_move(0, power);
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	62 cf       	rjmp	.-316    	; 0xed2 <dir_move>
    100e:	08 95       	ret
		break;
		case 1:
		dir_move(4, power);
    1010:	84 e0       	ldi	r24, 0x04	; 4
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	5e cf       	rjmp	.-324    	; 0xed2 <dir_move>
		break;
    1016:	08 95       	ret
		case 2:
		dir_move(5, power);
    1018:	85 e0       	ldi	r24, 0x05	; 5
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	5a cf       	rjmp	.-332    	; 0xed2 <dir_move>
		break;
    101e:	08 95       	ret
		case 3:
		dir_move(6, power);
    1020:	86 e0       	ldi	r24, 0x06	; 6
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	56 cf       	rjmp	.-340    	; 0xed2 <dir_move>
		break;
    1026:	08 95       	ret
		case 4:
		dir_move(7, power);
    1028:	87 e0       	ldi	r24, 0x07	; 7
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	52 cf       	rjmp	.-348    	; 0xed2 <dir_move>
		break;
    102e:	08 95       	ret
		case 5:
		dir_move(8, power);
    1030:	88 e0       	ldi	r24, 0x08	; 8
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	4e cf       	rjmp	.-356    	; 0xed2 <dir_move>
		break;
    1036:	08 95       	ret
		case 6:
		dir_move(9, power);
    1038:	89 e0       	ldi	r24, 0x09	; 9
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	4a cf       	rjmp	.-364    	; 0xed2 <dir_move>
		break;
    103e:	08 95       	ret
		case 7:
		dir_move(4, power);
    1040:	84 e0       	ldi	r24, 0x04	; 4
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	46 cf       	rjmp	.-372    	; 0xed2 <dir_move>
		break;
    1046:	08 95       	ret
		case 8:
		dir_move(5, power);
    1048:	85 e0       	ldi	r24, 0x05	; 5
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	42 cf       	rjmp	.-380    	; 0xed2 <dir_move>
		break;
    104e:	08 95       	ret
		case 9:
		dir_move(6, power);
    1050:	86 e0       	ldi	r24, 0x06	; 6
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	3e cf       	rjmp	.-388    	; 0xed2 <dir_move>
		break;
    1056:	08 95       	ret
		case 10:
		dir_move(7, power);
    1058:	87 e0       	ldi	r24, 0x07	; 7
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	3a cf       	rjmp	.-396    	; 0xed2 <dir_move>
		break;
    105e:	08 95       	ret
		case 11:
		dir_move(8, power);
    1060:	88 e0       	ldi	r24, 0x08	; 8
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	36 cf       	rjmp	.-404    	; 0xed2 <dir_move>
    1066:	08 95       	ret

00001068 <view_line>:
		break;
	}
}

void view_line(void)
{
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
	Lcd_Clear();
    1074:	f1 db       	rcall	.-2078   	; 0x858 <Lcd_Clear>
	Lcd_Write_String(LINE1,"LINE");
    1076:	6e e6       	ldi	r22, 0x6E	; 110
    1078:	71 e0       	ldi	r23, 0x01	; 1
    107a:	80 e8       	ldi	r24, 0x80	; 128
    107c:	d2 da       	rcall	.-2652   	; 0x622 <Lcd_Write_String>
    107e:	0f 2e       	mov	r0, r31
    1080:	fe e6       	ldi	r31, 0x6E	; 110
    1082:	ef 2e       	mov	r14, r31
    1084:	f2 e0       	ldi	r31, 0x02	; 2
    1086:	ff 2e       	mov	r15, r31
    1088:	f0 2d       	mov	r31, r0
    108a:	04 e7       	ldi	r16, 0x74	; 116
    108c:	12 e0       	ldi	r17, 0x02	; 2
	while(1)
	{
		Volt_Display();
    108e:	ea db       	rcall	.-2092   	; 0x864 <Volt_Display>
		Lcd_Cmd(LINE2);
    1090:	80 ec       	ldi	r24, 0xC0	; 192
    1092:	a1 da       	rcall	.-2750   	; 0x5d6 <Lcd_Cmd>
    1094:	e7 01       	movw	r28, r14
		for(int i=13;i<16; i++)
		{
			DigitDisplay(analog[i]);
    1096:	89 91       	ld	r24, Y+
    1098:	99 91       	ld	r25, Y+
    109a:	d2 da       	rcall	.-2652   	; 0x640 <DigitDisplay>
			Lcd_Data(' ');
    109c:	80 e2       	ldi	r24, 0x20	; 32
    109e:	5f d8       	rcall	.-3906   	; 0x15e <Lcd_Data>
	Lcd_Write_String(LINE1,"LINE");
	while(1)
	{
		Volt_Display();
		Lcd_Cmd(LINE2);
		for(int i=13;i<16; i++)
    10a0:	c0 17       	cp	r28, r16
    10a2:	d1 07       	cpc	r29, r17
    10a4:	c1 f7       	brne	.-16     	; 0x1096 <view_line+0x2e>
		{
			DigitDisplay(analog[i]);
			Lcd_Data(' ');
		}
		if(SELECT)
    10a6:	32 99       	sbic	0x06, 2	; 6
    10a8:	03 c0       	rjmp	.+6      	; 0x10b0 <view_line+0x48>
		{
			while(!SELECT)	;
    10aa:	32 99       	sbic	0x06, 2	; 6
    10ac:	fe cf       	rjmp	.-4      	; 0x10aa <view_line+0x42>
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <view_line+0x50>
			return;
		}
		delay1ms(200);
    10b0:	88 ec       	ldi	r24, 0xC8	; 200
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	67 d8       	rcall	.-3890   	; 0x184 <delay1ms>
	}
    10b6:	eb cf       	rjmp	.-42     	; 0x108e <view_line+0x26>
}
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	08 95       	ret

000010c6 <view_long_ir>:

void view_long_ir(void)
{
    10c6:	ef 92       	push	r14
    10c8:	ff 92       	push	r15
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
	Lcd_Clear();
    10d2:	c2 db       	rcall	.-2172   	; 0x858 <Lcd_Clear>
	Lcd_Write_String(LINE1,"LONG IR");
    10d4:	63 e7       	ldi	r22, 0x73	; 115
    10d6:	71 e0       	ldi	r23, 0x01	; 1
    10d8:	80 e8       	ldi	r24, 0x80	; 128
    10da:	a3 da       	rcall	.-2746   	; 0x622 <Lcd_Write_String>
	while(1)
	{
		Lcd_Move(0, 9);
		for(int i=0;i<2; i++)
		{
			DigitDisplay(analog[i*2]);
    10dc:	0f 2e       	mov	r0, r31
    10de:	f4 e5       	ldi	r31, 0x54	; 84
    10e0:	ef 2e       	mov	r14, r31
    10e2:	f2 e0       	ldi	r31, 0x02	; 2
    10e4:	ff 2e       	mov	r15, r31
    10e6:	f0 2d       	mov	r31, r0
    10e8:	04 e6       	ldi	r16, 0x64	; 100
    10ea:	12 e0       	ldi	r17, 0x02	; 2

void Lcd_Move(char line, char pos)
{
	pos=(line<<6)+pos;
	pos |= 0x80;
	Lcd_Cmd(pos);
    10ec:	89 e8       	ldi	r24, 0x89	; 137
    10ee:	73 da       	rcall	.-2842   	; 0x5d6 <Lcd_Cmd>
    10f0:	f7 01       	movw	r30, r14
    10f2:	80 81       	ld	r24, Z
    10f4:	91 81       	ldd	r25, Z+1	; 0x01
    10f6:	a4 da       	rcall	.-2744   	; 0x640 <DigitDisplay>
			Lcd_Data(' ');
    10f8:	80 e2       	ldi	r24, 0x20	; 32
    10fa:	31 d8       	rcall	.-3998   	; 0x15e <Lcd_Data>
	while(1)
	{
		Lcd_Move(0, 9);
		for(int i=0;i<2; i++)
		{
			DigitDisplay(analog[i*2]);
    10fc:	f7 01       	movw	r30, r14
    10fe:	84 81       	ldd	r24, Z+4	; 0x04
    1100:	95 81       	ldd	r25, Z+5	; 0x05
    1102:	9e da       	rcall	.-2756   	; 0x640 <DigitDisplay>
			Lcd_Data(' ');
    1104:	80 e2       	ldi	r24, 0x20	; 32
    1106:	2b d8       	rcall	.-4010   	; 0x15e <Lcd_Data>
		}
		Lcd_Cmd(LINE2);
    1108:	80 ec       	ldi	r24, 0xC0	; 192
    110a:	65 da       	rcall	.-2870   	; 0x5d6 <Lcd_Cmd>
    110c:	e7 01       	movw	r28, r14
		for(int i=2;i<6; i++)
		{
			DigitDisplay(analog[i*2]);
    110e:	88 85       	ldd	r24, Y+8	; 0x08
    1110:	99 85       	ldd	r25, Y+9	; 0x09
    1112:	96 da       	rcall	.-2772   	; 0x640 <DigitDisplay>
			Lcd_Data(' ');
    1114:	80 e2       	ldi	r24, 0x20	; 32
    1116:	23 d8       	rcall	.-4026   	; 0x15e <Lcd_Data>
    1118:	24 96       	adiw	r28, 0x04	; 4
		{
			DigitDisplay(analog[i*2]);
			Lcd_Data(' ');
		}
		Lcd_Cmd(LINE2);
		for(int i=2;i<6; i++)
    111a:	c0 17       	cp	r28, r16
    111c:	d1 07       	cpc	r29, r17
    111e:	b9 f7       	brne	.-18     	; 0x110e <view_long_ir+0x48>
		{
			DigitDisplay(analog[i*2]);
			Lcd_Data(' ');
		}
		if(SELECT)
    1120:	32 99       	sbic	0x06, 2	; 6
    1122:	03 c0       	rjmp	.+6      	; 0x112a <view_long_ir+0x64>
		{
			while(!SELECT)	;
    1124:	32 99       	sbic	0x06, 2	; 6
    1126:	fe cf       	rjmp	.-4      	; 0x1124 <view_long_ir+0x5e>
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <view_long_ir+0x6c>
			return;
		}
		delay1ms(200);
    112a:	88 ec       	ldi	r24, 0xC8	; 200
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	2a d8       	rcall	.-4012   	; 0x184 <delay1ms>
	}
    1130:	dd cf       	rjmp	.-70     	; 0x10ec <view_long_ir+0x26>
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	08 95       	ret

00001140 <view_short_ir>:

void view_short_ir(void)
{
    1140:	ef 92       	push	r14
    1142:	ff 92       	push	r15
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
	Lcd_Clear();
    114c:	85 db       	rcall	.-2294   	; 0x858 <Lcd_Clear>
	Lcd_Write_String(LINE1,"SHORT IR");
    114e:	6b e7       	ldi	r22, 0x7B	; 123
    1150:	71 e0       	ldi	r23, 0x01	; 1
    1152:	80 e8       	ldi	r24, 0x80	; 128
    1154:	66 da       	rcall	.-2868   	; 0x622 <Lcd_Write_String>
	while(1)
	{
		Lcd_Move(0, 9);
		for(int i=0;i<2; i++)
		{
			DigitDisplay(analog[i*2+1]);
    1156:	0f 2e       	mov	r0, r31
    1158:	f4 e5       	ldi	r31, 0x54	; 84
    115a:	ef 2e       	mov	r14, r31
    115c:	f2 e0       	ldi	r31, 0x02	; 2
    115e:	ff 2e       	mov	r15, r31
    1160:	f0 2d       	mov	r31, r0
    1162:	04 e6       	ldi	r16, 0x64	; 100
    1164:	12 e0       	ldi	r17, 0x02	; 2
    1166:	89 e8       	ldi	r24, 0x89	; 137
    1168:	36 da       	rcall	.-2964   	; 0x5d6 <Lcd_Cmd>
    116a:	f7 01       	movw	r30, r14
    116c:	82 81       	ldd	r24, Z+2	; 0x02
    116e:	93 81       	ldd	r25, Z+3	; 0x03
    1170:	67 da       	rcall	.-2866   	; 0x640 <DigitDisplay>
			Lcd_Data(' ');
    1172:	80 e2       	ldi	r24, 0x20	; 32
    1174:	0e 94 af 00 	call	0x15e	; 0x15e <Lcd_Data>
	while(1)
	{
		Lcd_Move(0, 9);
		for(int i=0;i<2; i++)
		{
			DigitDisplay(analog[i*2+1]);
    1178:	f7 01       	movw	r30, r14
    117a:	86 81       	ldd	r24, Z+6	; 0x06
    117c:	97 81       	ldd	r25, Z+7	; 0x07
    117e:	60 da       	rcall	.-2880   	; 0x640 <DigitDisplay>
			Lcd_Data(' ');
    1180:	80 e2       	ldi	r24, 0x20	; 32
    1182:	0e 94 af 00 	call	0x15e	; 0x15e <Lcd_Data>
		}
		Lcd_Cmd(LINE2);
    1186:	80 ec       	ldi	r24, 0xC0	; 192
    1188:	26 da       	rcall	.-2996   	; 0x5d6 <Lcd_Cmd>
    118a:	e7 01       	movw	r28, r14
		for(int i=2;i<6; i++)
		{
			DigitDisplay(analog[i*2+1]);
    118c:	8a 85       	ldd	r24, Y+10	; 0x0a
    118e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1190:	57 da       	rcall	.-2898   	; 0x640 <DigitDisplay>
			Lcd_Data(' ');
    1192:	80 e2       	ldi	r24, 0x20	; 32
    1194:	0e 94 af 00 	call	0x15e	; 0x15e <Lcd_Data>
    1198:	24 96       	adiw	r28, 0x04	; 4
		{
			DigitDisplay(analog[i*2+1]);
			Lcd_Data(' ');
		}
		Lcd_Cmd(LINE2);
		for(int i=2;i<6; i++)
    119a:	c0 17       	cp	r28, r16
    119c:	d1 07       	cpc	r29, r17
    119e:	b1 f7       	brne	.-20     	; 0x118c <view_short_ir+0x4c>
		{
			DigitDisplay(analog[i*2+1]);
			Lcd_Data(' ');
		}
		if(SELECT)
    11a0:	32 99       	sbic	0x06, 2	; 6
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <view_short_ir+0x6a>
		{
			while(!SELECT)	;
    11a4:	32 99       	sbic	0x06, 2	; 6
    11a6:	fe cf       	rjmp	.-4      	; 0x11a4 <view_short_ir+0x64>
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <view_short_ir+0x74>
			return;
		}
		delay1ms(200);
    11aa:	88 ec       	ldi	r24, 0xC8	; 200
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 c2 00 	call	0x184	; 0x184 <delay1ms>
	}
    11b2:	d9 cf       	rjmp	.-78     	; 0x1166 <view_short_ir+0x26>
}
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	08 95       	ret

000011c2 <view_ultra>:

void view_ultra(void)
{
    11c2:	ef 92       	push	r14
    11c4:	ff 92       	push	r15
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
	Lcd_Clear();
    11ce:	44 db       	rcall	.-2424   	; 0x858 <Lcd_Clear>
	Lcd_Write_String(LINE1,"ULTRA");
    11d0:	64 e8       	ldi	r22, 0x84	; 132
    11d2:	71 e0       	ldi	r23, 0x01	; 1
    11d4:	80 e8       	ldi	r24, 0x80	; 128
    11d6:	25 da       	rcall	.-2998   	; 0x622 <Lcd_Write_String>
    11d8:	0f 2e       	mov	r0, r31
    11da:	fb ed       	ldi	r31, 0xDB	; 219
    11dc:	ef 2e       	mov	r14, r31
    11de:	f2 e0       	ldi	r31, 0x02	; 2
    11e0:	ff 2e       	mov	r15, r31
    11e2:	f0 2d       	mov	r31, r0
    11e4:	03 ee       	ldi	r16, 0xE3	; 227
    11e6:	12 e0       	ldi	r17, 0x02	; 2
	while(1)
	{
		Volt_Display();
    11e8:	3d db       	rcall	.-2438   	; 0x864 <Volt_Display>
		Lcd_Cmd(LINE2);
    11ea:	80 ec       	ldi	r24, 0xC0	; 192
    11ec:	f4 d9       	rcall	.-3096   	; 0x5d6 <Lcd_Cmd>
    11ee:	e7 01       	movw	r28, r14
		for(int i=0;i<4; i++)
		{				
			DigitDisplay((int)((float)ultra[i]*0.34));
    11f0:	69 91       	ld	r22, Y+
    11f2:	79 91       	ld	r23, Y+
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	73 d3       	rcall	.+1766   	; 0x18e0 <__floatunsisf>
    11fa:	2b e7       	ldi	r18, 0x7B	; 123
    11fc:	34 e1       	ldi	r19, 0x14	; 20
    11fe:	4e ea       	ldi	r20, 0xAE	; 174
    1200:	5e e3       	ldi	r21, 0x3E	; 62
    1202:	28 d4       	rcall	.+2128   	; 0x1a54 <__mulsf3>
    1204:	3c d3       	rcall	.+1656   	; 0x187e <__fixsfsi>
    1206:	cb 01       	movw	r24, r22
    1208:	1b da       	rcall	.-3018   	; 0x640 <DigitDisplay>
			Lcd_Data(' ');
    120a:	80 e2       	ldi	r24, 0x20	; 32
    120c:	0e 94 af 00 	call	0x15e	; 0x15e <Lcd_Data>
	Lcd_Write_String(LINE1,"ULTRA");
	while(1)
	{
		Volt_Display();
		Lcd_Cmd(LINE2);
		for(int i=0;i<4; i++)
    1210:	c0 17       	cp	r28, r16
    1212:	d1 07       	cpc	r29, r17
    1214:	69 f7       	brne	.-38     	; 0x11f0 <view_ultra+0x2e>
		{				
			DigitDisplay((int)((float)ultra[i]*0.34));
			Lcd_Data(' ');
		}
		if(SELECT)
    1216:	32 99       	sbic	0x06, 2	; 6
    1218:	03 c0       	rjmp	.+6      	; 0x1220 <view_ultra+0x5e>
		{
			while(!SELECT)	;
    121a:	32 99       	sbic	0x06, 2	; 6
    121c:	fe cf       	rjmp	.-4      	; 0x121a <view_ultra+0x58>
    121e:	05 c0       	rjmp	.+10     	; 0x122a <view_ultra+0x68>
			return;
		}
		delay1ms(200);
    1220:	88 ec       	ldi	r24, 0xC8	; 200
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 c2 00 	call	0x184	; 0x184 <delay1ms>
	}
    1228:	df cf       	rjmp	.-66     	; 0x11e8 <view_ultra+0x26>
}
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	ff 90       	pop	r15
    1234:	ef 90       	pop	r14
    1236:	08 95       	ret

00001238 <view_compass>:

void view_compass(void)
{
	Lcd_Clear();
    1238:	0f db       	rcall	.-2530   	; 0x858 <Lcd_Clear>
	Lcd_Write_String(LINE1,"COMPASS");
    123a:	6a e8       	ldi	r22, 0x8A	; 138
    123c:	71 e0       	ldi	r23, 0x01	; 1
    123e:	80 e8       	ldi	r24, 0x80	; 128
    1240:	f0 d9       	rcall	.-3104   	; 0x622 <Lcd_Write_String>
	while(1)
	{
		read_compass();
    1242:	61 dc       	rcall	.-1854   	; 0xb06 <read_compass>
		
		Lcd_Cmd(LINE2);
    1244:	80 ec       	ldi	r24, 0xC0	; 192
    1246:	c7 d9       	rcall	.-3186   	; 0x5d6 <Lcd_Cmd>
		AngleDisplay(compass);
    1248:	60 91 8c 02 	lds	r22, 0x028C
    124c:	70 91 8d 02 	lds	r23, 0x028D
    1250:	80 91 8e 02 	lds	r24, 0x028E
    1254:	90 91 8f 02 	lds	r25, 0x028F
    1258:	17 d3       	rcall	.+1582   	; 0x1888 <__fixunssfsi>
    125a:	cb 01       	movw	r24, r22
    125c:	5e da       	rcall	.-2884   	; 0x71a <AngleDisplay>

		if(SELECT)
    125e:	32 99       	sbic	0x06, 2	; 6
    1260:	03 c0       	rjmp	.+6      	; 0x1268 <view_compass+0x30>
		{
			while(!SELECT)	;
    1262:	32 99       	sbic	0x06, 2	; 6
    1264:	fe cf       	rjmp	.-4      	; 0x1262 <view_compass+0x2a>
    1266:	08 95       	ret
			return;
		}
		delay1ms(200);
    1268:	88 ec       	ldi	r24, 0xC8	; 200
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 c2 00 	call	0x184	; 0x184 <delay1ms>
	}
    1270:	e8 cf       	rjmp	.-48     	; 0x1242 <view_compass+0xa>

00001272 <menu_display>:
}

void menu_display(unsigned char no)
{
	switch(no)
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	87 30       	cpi	r24, 0x07	; 7
    1276:	91 05       	cpc	r25, r1
    1278:	30 f5       	brcc	.+76     	; 0x12c6 <menu_display+0x54>
    127a:	fc 01       	movw	r30, r24
    127c:	e2 5a       	subi	r30, 0xA2	; 162
    127e:	ff 4f       	sbci	r31, 0xFF	; 255
    1280:	64 c4       	rjmp	.+2248   	; 0x1b4a <__tablejump2__>
	{
		case 0: Lcd_Write_String(LINE2,"RUN PROGRAM 1   ");
    1282:	62 e9       	ldi	r22, 0x92	; 146
    1284:	71 e0       	ldi	r23, 0x01	; 1
    1286:	80 ec       	ldi	r24, 0xC0	; 192
    1288:	cc c9       	rjmp	.-3176   	; 0x622 <Lcd_Write_String>
		break;
    128a:	08 95       	ret
		case 1: Lcd_Write_String(LINE2,"RUN PROGRAM 2   ");
    128c:	63 ea       	ldi	r22, 0xA3	; 163
    128e:	71 e0       	ldi	r23, 0x01	; 1
    1290:	80 ec       	ldi	r24, 0xC0	; 192
    1292:	c7 c9       	rjmp	.-3186   	; 0x622 <Lcd_Write_String>
		break;
    1294:	08 95       	ret
		case 2: Lcd_Write_String(LINE2,"VIEW COMPASS    ");
    1296:	64 eb       	ldi	r22, 0xB4	; 180
    1298:	71 e0       	ldi	r23, 0x01	; 1
    129a:	80 ec       	ldi	r24, 0xC0	; 192
    129c:	c2 c9       	rjmp	.-3196   	; 0x622 <Lcd_Write_String>
		break;
    129e:	08 95       	ret
		case 3: Lcd_Write_String(LINE2,"VIEW ULTRA      ");
    12a0:	65 ec       	ldi	r22, 0xC5	; 197
    12a2:	71 e0       	ldi	r23, 0x01	; 1
    12a4:	80 ec       	ldi	r24, 0xC0	; 192
    12a6:	bd c9       	rjmp	.-3206   	; 0x622 <Lcd_Write_String>
		break;
    12a8:	08 95       	ret
		case 4: Lcd_Write_String(LINE2,"VIEW SHORT IR   ");
    12aa:	66 ed       	ldi	r22, 0xD6	; 214
    12ac:	71 e0       	ldi	r23, 0x01	; 1
    12ae:	80 ec       	ldi	r24, 0xC0	; 192
    12b0:	b8 c9       	rjmp	.-3216   	; 0x622 <Lcd_Write_String>
		break;
    12b2:	08 95       	ret
		case 5: Lcd_Write_String(LINE2,"VIEW LONG IR    ");
    12b4:	67 ee       	ldi	r22, 0xE7	; 231
    12b6:	71 e0       	ldi	r23, 0x01	; 1
    12b8:	80 ec       	ldi	r24, 0xC0	; 192
    12ba:	b3 c9       	rjmp	.-3226   	; 0x622 <Lcd_Write_String>
		break;
    12bc:	08 95       	ret
		case 6: Lcd_Write_String(LINE2,"VIEW LINE SENSOR");
    12be:	68 ef       	ldi	r22, 0xF8	; 248
    12c0:	71 e0       	ldi	r23, 0x01	; 1
    12c2:	80 ec       	ldi	r24, 0xC0	; 192
    12c4:	ae c9       	rjmp	.-3236   	; 0x622 <Lcd_Write_String>
    12c6:	08 95       	ret

000012c8 <find_ball>:
		break;
	}
}

void find_ball()
{
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
	ball_dir = 0;
    12d4:	10 92 da 02 	sts	0x02DA, r1
    12d8:	10 92 d9 02 	sts	0x02D9, r1
	max_ir = 0;
    12dc:	10 92 4b 02 	sts	0x024B, r1
    12e0:	10 92 4a 02 	sts	0x024A, r1
    12e4:	e4 e5       	ldi	r30, 0x54	; 84
    12e6:	f2 e0       	ldi	r31, 0x02	; 2
    12e8:	c0 e9       	ldi	r28, 0x90	; 144
    12ea:	d2 e0       	ldi	r29, 0x02	; 2
    12ec:	2c e6       	ldi	r18, 0x6C	; 108
    12ee:	32 e0       	ldi	r19, 0x02	; 2
    12f0:	de 01       	movw	r26, r28
	for(int i = 0; i < 6; i++)
		ir[i*2] = analog[i*2] > 240? 128 + analog[i*2+1]/2 : analog[i*2]/2;
    12f2:	80 81       	ld	r24, Z
    12f4:	91 81       	ldd	r25, Z+1	; 0x01
    12f6:	81 3f       	cpi	r24, 0xF1	; 241
    12f8:	91 05       	cpc	r25, r1
    12fa:	38 f0       	brcs	.+14     	; 0x130a <find_ball+0x42>
    12fc:	82 81       	ldd	r24, Z+2	; 0x02
    12fe:	93 81       	ldd	r25, Z+3	; 0x03
    1300:	96 95       	lsr	r25
    1302:	87 95       	ror	r24
    1304:	80 58       	subi	r24, 0x80	; 128
    1306:	9f 4f       	sbci	r25, 0xFF	; 255
    1308:	02 c0       	rjmp	.+4      	; 0x130e <find_ball+0x46>
    130a:	96 95       	lsr	r25
    130c:	87 95       	ror	r24
    130e:	11 96       	adiw	r26, 0x01	; 1
    1310:	9c 93       	st	X, r25
    1312:	8e 93       	st	-X, r24
    1314:	34 96       	adiw	r30, 0x04	; 4
    1316:	14 96       	adiw	r26, 0x04	; 4

void find_ball()
{
	ball_dir = 0;
	max_ir = 0;
	for(int i = 0; i < 6; i++)
    1318:	e2 17       	cp	r30, r18
    131a:	f3 07       	cpc	r31, r19
    131c:	51 f7       	brne	.-44     	; 0x12f2 <find_ball+0x2a>
    131e:	0f 2e       	mov	r0, r31
    1320:	f4 ea       	ldi	r31, 0xA4	; 164
    1322:	ef 2e       	mov	r14, r31
    1324:	f2 e0       	ldi	r31, 0x02	; 2
    1326:	ff 2e       	mov	r15, r31
    1328:	f0 2d       	mov	r31, r0
    132a:	00 e9       	ldi	r16, 0x90	; 144
    132c:	12 e0       	ldi	r17, 0x02	; 2
		ir[i*2] = analog[i*2] > 240? 128 + analog[i*2+1]/2 : analog[i*2]/2;
	for(int i = 0; i < 5; i++)
		ir[i*2+1] = (int)((float)(ir[i*2] + ir[i*2+2])/2*1.20);
    132e:	f8 01       	movw	r30, r16
    1330:	64 81       	ldd	r22, Z+4	; 0x04
    1332:	75 81       	ldd	r23, Z+5	; 0x05
    1334:	80 81       	ld	r24, Z
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	68 0f       	add	r22, r24
    133a:	79 1f       	adc	r23, r25
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	cf d2       	rcall	.+1438   	; 0x18e0 <__floatunsisf>
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	5f e3       	ldi	r21, 0x3F	; 63
    134a:	84 d3       	rcall	.+1800   	; 0x1a54 <__mulsf3>
    134c:	2a e9       	ldi	r18, 0x9A	; 154
    134e:	39 e9       	ldi	r19, 0x99	; 153
    1350:	49 e9       	ldi	r20, 0x99	; 153
    1352:	5f e3       	ldi	r21, 0x3F	; 63
    1354:	7f d3       	rcall	.+1790   	; 0x1a54 <__mulsf3>
    1356:	93 d2       	rcall	.+1318   	; 0x187e <__fixsfsi>
    1358:	f8 01       	movw	r30, r16
    135a:	73 83       	std	Z+3, r23	; 0x03
    135c:	62 83       	std	Z+2, r22	; 0x02
    135e:	0c 5f       	subi	r16, 0xFC	; 252
    1360:	1f 4f       	sbci	r17, 0xFF	; 255
{
	ball_dir = 0;
	max_ir = 0;
	for(int i = 0; i < 6; i++)
		ir[i*2] = analog[i*2] > 240? 128 + analog[i*2+1]/2 : analog[i*2]/2;
	for(int i = 0; i < 5; i++)
    1362:	0e 15       	cp	r16, r14
    1364:	1f 05       	cpc	r17, r15
    1366:	19 f7       	brne	.-58     	; 0x132e <find_ball+0x66>
		ir[i*2+1] = (int)((float)(ir[i*2] + ir[i*2+2])/2*1.20);
	ir[11] = (int)((float)(ir[10] + ir[0])/2*1.50);
    1368:	00 e9       	ldi	r16, 0x90	; 144
    136a:	12 e0       	ldi	r17, 0x02	; 2
    136c:	f8 01       	movw	r30, r16
    136e:	60 81       	ld	r22, Z
    1370:	71 81       	ldd	r23, Z+1	; 0x01
    1372:	84 89       	ldd	r24, Z+20	; 0x14
    1374:	95 89       	ldd	r25, Z+21	; 0x15
    1376:	68 0f       	add	r22, r24
    1378:	79 1f       	adc	r23, r25
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	b0 d2       	rcall	.+1376   	; 0x18e0 <__floatunsisf>
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	5f e3       	ldi	r21, 0x3F	; 63
    1388:	65 d3       	rcall	.+1738   	; 0x1a54 <__mulsf3>
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 ec       	ldi	r20, 0xC0	; 192
    1390:	5f e3       	ldi	r21, 0x3F	; 63
    1392:	60 d3       	rcall	.+1728   	; 0x1a54 <__mulsf3>
    1394:	74 d2       	rcall	.+1256   	; 0x187e <__fixsfsi>
    1396:	f8 01       	movw	r30, r16
    1398:	77 8b       	std	Z+23, r23	; 0x17
    139a:	66 8b       	std	Z+22, r22	; 0x16
    139c:	40 91 4a 02 	lds	r20, 0x024A
    13a0:	50 91 4b 02 	lds	r21, 0x024B
    13a4:	70 91 d9 02 	lds	r23, 0x02D9
    13a8:	60 91 da 02 	lds	r22, 0x02DA
	for(int i = 0; i < 12; i++)
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(max_ir < ir[i])
    13b0:	29 91       	ld	r18, Y+
    13b2:	39 91       	ld	r19, Y+
    13b4:	42 17       	cp	r20, r18
    13b6:	53 07       	cpc	r21, r19
    13b8:	18 f4       	brcc	.+6      	; 0x13c0 <find_ball+0xf8>
		{
			max_ir = ir[i];
    13ba:	a9 01       	movw	r20, r18
			ball_dir = i;
    13bc:	78 2f       	mov	r23, r24
    13be:	69 2f       	mov	r22, r25
	for(int i = 0; i < 6; i++)
		ir[i*2] = analog[i*2] > 240? 128 + analog[i*2+1]/2 : analog[i*2]/2;
	for(int i = 0; i < 5; i++)
		ir[i*2+1] = (int)((float)(ir[i*2] + ir[i*2+2])/2*1.20);
	ir[11] = (int)((float)(ir[10] + ir[0])/2*1.50);
	for(int i = 0; i < 12; i++)
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	8c 30       	cpi	r24, 0x0C	; 12
    13c4:	91 05       	cpc	r25, r1
    13c6:	a1 f7       	brne	.-24     	; 0x13b0 <find_ball+0xe8>
    13c8:	50 93 4b 02 	sts	0x024B, r21
    13cc:	40 93 4a 02 	sts	0x024A, r20
    13d0:	70 93 d9 02 	sts	0x02D9, r23
    13d4:	60 93 da 02 	sts	0x02DA, r22
		{
			max_ir = ir[i];
			ball_dir = i;
		}
	}
}
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	1f 91       	pop	r17
    13de:	0f 91       	pop	r16
    13e0:	ff 90       	pop	r15
    13e2:	ef 90       	pop	r14
    13e4:	08 95       	ret

000013e6 <view_totalIR>:

void view_totalIR(void)
{
	Lcd_Clear();
    13e6:	38 da       	rcall	.-2960   	; 0x858 <Lcd_Clear>
	Lcd_Write_String(LINE1,"IR");
    13e8:	68 e7       	ldi	r22, 0x78	; 120
    13ea:	71 e0       	ldi	r23, 0x01	; 1
    13ec:	80 e8       	ldi	r24, 0x80	; 128
    13ee:	19 d9       	rcall	.-3534   	; 0x622 <Lcd_Write_String>
	while(1)
	{
		find_ball();
    13f0:	6b df       	rcall	.-298    	; 0x12c8 <find_ball>
		Volt_Display();
    13f2:	38 da       	rcall	.-2960   	; 0x864 <Volt_Display>
		Lcd_Cmd(LINE2);
    13f4:	80 ec       	ldi	r24, 0xC0	; 192
    13f6:	ef d8       	rcall	.-3618   	; 0x5d6 <Lcd_Cmd>
		DigitDisplay(max_ir);
    13f8:	80 91 4a 02 	lds	r24, 0x024A
    13fc:	90 91 4b 02 	lds	r25, 0x024B
    1400:	1f d9       	rcall	.-3522   	; 0x640 <DigitDisplay>
		Lcd_Data(' ');
    1402:	80 e2       	ldi	r24, 0x20	; 32
    1404:	0e 94 af 00 	call	0x15e	; 0x15e <Lcd_Data>
		DigitDisplay(ball_dir);
    1408:	80 91 d9 02 	lds	r24, 0x02D9
    140c:	90 91 da 02 	lds	r25, 0x02DA
    1410:	17 d9       	rcall	.-3538   	; 0x640 <DigitDisplay>
		delay1ms(200);
    1412:	88 ec       	ldi	r24, 0xC8	; 200
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 c2 00 	call	0x184	; 0x184 <delay1ms>
	}
    141a:	ea cf       	rjmp	.-44     	; 0x13f0 <view_totalIR+0xa>

0000141c <PROGRAM1>:
}

void PROGRAM1(void)
{
	Lcd_Clear();
    141c:	1d da       	rcall	.-3014   	; 0x858 <Lcd_Clear>
	while(1)
	{
		view_totalIR();
    141e:	e3 df       	rcall	.-58     	; 0x13e6 <view_totalIR>

00001420 <PROGRAM2>:
	}
	move(0,0,0);
}
void PROGRAM2(void)
{
	move(0,0,0);
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	c3 dc       	rcall	.-1658   	; 0xdb4 <move>
	Lcd_Clear();
    142e:	14 da       	rcall	.-3032   	; 0x858 <Lcd_Clear>
	int ultra_gap = 0;
	while(1)
	{
		find_ball();
		if(ball_dir > 6)
			last_pos = 1;
    1430:	c1 e0       	ldi	r28, 0x01	; 1
    1432:	d0 e0       	ldi	r29, 0x00	; 0
		else if(ball_dir > 1 && ball_dir < 6)
			last_pos = 0;

		if(max_ir > 155 && (ball_dir == 0 || ball_dir == 1 || ball_dir == 11))			//공이 가까이 있을 때
		{
			ultra_gap = (int)((float)ultra[1]*0.34) - (int)((float)ultra[3]*0.34);
    1434:	0b ed       	ldi	r16, 0xDB	; 219
    1436:	12 e0       	ldi	r17, 0x02	; 2
			int comp;
			read_compass();
			comp = (int)compass / 10;
    1438:	0f 2e       	mov	r0, r31
    143a:	fa e0       	ldi	r31, 0x0A	; 10
    143c:	2f 2e       	mov	r2, r31
    143e:	31 2c       	mov	r3, r1
    1440:	f0 2d       	mov	r31, r0
	move(0,0,0);
	Lcd_Clear();
	int ultra_gap = 0;
	while(1)
	{
		find_ball();
    1442:	42 df       	rcall	.-380    	; 0x12c8 <find_ball>
		if(ball_dir > 6)
    1444:	80 91 d9 02 	lds	r24, 0x02D9
    1448:	90 91 da 02 	lds	r25, 0x02DA
    144c:	87 30       	cpi	r24, 0x07	; 7
    144e:	91 05       	cpc	r25, r1
    1450:	2c f0       	brlt	.+10     	; 0x145c <PROGRAM2+0x3c>
			last_pos = 1;
    1452:	d0 93 48 02 	sts	0x0248, r29
    1456:	c0 93 47 02 	sts	0x0247, r28
    145a:	0a c0       	rjmp	.+20     	; 0x1470 <PROGRAM2+0x50>
		else if(ball_dir > 1 && ball_dir < 6)
    145c:	9c 01       	movw	r18, r24
    145e:	22 50       	subi	r18, 0x02	; 2
    1460:	31 09       	sbc	r19, r1
    1462:	24 30       	cpi	r18, 0x04	; 4
    1464:	31 05       	cpc	r19, r1
    1466:	20 f4       	brcc	.+8      	; 0x1470 <PROGRAM2+0x50>
			last_pos = 0;
    1468:	10 92 48 02 	sts	0x0248, r1
    146c:	10 92 47 02 	sts	0x0247, r1

		if(max_ir > 155 && (ball_dir == 0 || ball_dir == 1 || ball_dir == 11))			//공이 가까이 있을 때
    1470:	20 91 4a 02 	lds	r18, 0x024A
    1474:	30 91 4b 02 	lds	r19, 0x024B
    1478:	2c 39       	cpi	r18, 0x9C	; 156
    147a:	31 05       	cpc	r19, r1
    147c:	0c f4       	brge	.+2      	; 0x1480 <PROGRAM2+0x60>
    147e:	5f c0       	rjmp	.+190    	; 0x153e <PROGRAM2+0x11e>
    1480:	82 30       	cpi	r24, 0x02	; 2
    1482:	91 05       	cpc	r25, r1
    1484:	20 f0       	brcs	.+8      	; 0x148e <PROGRAM2+0x6e>
    1486:	8b 30       	cpi	r24, 0x0B	; 11
    1488:	91 05       	cpc	r25, r1
    148a:	09 f0       	breq	.+2      	; 0x148e <PROGRAM2+0x6e>
    148c:	58 c0       	rjmp	.+176    	; 0x153e <PROGRAM2+0x11e>
		{
			ultra_gap = (int)((float)ultra[1]*0.34) - (int)((float)ultra[3]*0.34);
    148e:	f8 01       	movw	r30, r16
    1490:	62 81       	ldd	r22, Z+2	; 0x02
    1492:	73 81       	ldd	r23, Z+3	; 0x03
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	23 d2       	rcall	.+1094   	; 0x18e0 <__floatunsisf>
    149a:	2b e7       	ldi	r18, 0x7B	; 123
    149c:	34 e1       	ldi	r19, 0x14	; 20
    149e:	4e ea       	ldi	r20, 0xAE	; 174
    14a0:	5e e3       	ldi	r21, 0x3E	; 62
    14a2:	d8 d2       	rcall	.+1456   	; 0x1a54 <__mulsf3>
    14a4:	ec d1       	rcall	.+984    	; 0x187e <__fixsfsi>
    14a6:	6b 01       	movw	r12, r22
    14a8:	7c 01       	movw	r14, r24
    14aa:	f8 01       	movw	r30, r16
    14ac:	86 81       	ldd	r24, Z+6	; 0x06
    14ae:	97 81       	ldd	r25, Z+7	; 0x07
    14b0:	bc 01       	movw	r22, r24
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	14 d2       	rcall	.+1064   	; 0x18e0 <__floatunsisf>
    14b8:	2b e7       	ldi	r18, 0x7B	; 123
    14ba:	34 e1       	ldi	r19, 0x14	; 20
    14bc:	4e ea       	ldi	r20, 0xAE	; 174
    14be:	5e e3       	ldi	r21, 0x3E	; 62
    14c0:	c9 d2       	rcall	.+1426   	; 0x1a54 <__mulsf3>
    14c2:	dd d1       	rcall	.+954    	; 0x187e <__fixsfsi>
    14c4:	76 01       	movw	r14, r12
    14c6:	e6 1a       	sub	r14, r22
    14c8:	f7 0a       	sbc	r15, r23
			int comp;
			read_compass();
    14ca:	1d db       	rcall	.-2502   	; 0xb06 <read_compass>
			comp = (int)compass / 10;
    14cc:	60 91 8c 02 	lds	r22, 0x028C
    14d0:	70 91 8d 02 	lds	r23, 0x028D
    14d4:	80 91 8e 02 	lds	r24, 0x028E
    14d8:	90 91 8f 02 	lds	r25, 0x028F
    14dc:	d0 d1       	rcall	.+928    	; 0x187e <__fixsfsi>
    14de:	cb 01       	movw	r24, r22
    14e0:	b1 01       	movw	r22, r2
    14e2:	20 d3       	rcall	.+1600   	; 0x1b24 <__divmodhi4>
			comp = comp - 180 - ultra_gap;
    14e4:	cb 01       	movw	r24, r22
    14e6:	84 5b       	subi	r24, 0xB4	; 180
    14e8:	91 09       	sbc	r25, r1
    14ea:	bc 01       	movw	r22, r24
    14ec:	6e 19       	sub	r22, r14
    14ee:	7f 09       	sbc	r23, r15
			
			move(100+comp*KP, comp*KP, -100+comp*KP);
    14f0:	07 2e       	mov	r0, r23
    14f2:	00 0c       	add	r0, r0
    14f4:	88 0b       	sbc	r24, r24
    14f6:	99 0b       	sbc	r25, r25
    14f8:	f5 d1       	rcall	.+1002   	; 0x18e4 <__floatsisf>
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	5f e3       	ldi	r21, 0x3F	; 63
    1502:	a8 d2       	rcall	.+1360   	; 0x1a54 <__mulsf3>
    1504:	6b 01       	movw	r12, r22
    1506:	7c 01       	movw	r14, r24
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	48 ec       	ldi	r20, 0xC8	; 200
    150e:	52 e4       	ldi	r21, 0x42	; 66
    1510:	89 d0       	rcall	.+274    	; 0x1624 <__subsf3>
    1512:	b5 d1       	rcall	.+874    	; 0x187e <__fixsfsi>
    1514:	2b 01       	movw	r4, r22
    1516:	3c 01       	movw	r6, r24
    1518:	c7 01       	movw	r24, r14
    151a:	b6 01       	movw	r22, r12
    151c:	b0 d1       	rcall	.+864    	; 0x187e <__fixsfsi>
    151e:	4b 01       	movw	r8, r22
    1520:	5c 01       	movw	r10, r24
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	48 ec       	ldi	r20, 0xC8	; 200
    1528:	52 e4       	ldi	r21, 0x42	; 66
    152a:	c7 01       	movw	r24, r14
    152c:	b6 01       	movw	r22, r12
    152e:	7b d0       	rcall	.+246    	; 0x1626 <__addsf3>
    1530:	a6 d1       	rcall	.+844    	; 0x187e <__fixsfsi>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	a2 01       	movw	r20, r4
    1538:	b4 01       	movw	r22, r8
    153a:	3c dc       	rcall	.-1928   	; 0xdb4 <move>
			last_pos = 1;
		else if(ball_dir > 1 && ball_dir < 6)
			last_pos = 0;

		if(max_ir > 155 && (ball_dir == 0 || ball_dir == 1 || ball_dir == 11))			//공이 가까이 있을 때
		{
    153c:	82 cf       	rjmp	.-252    	; 0x1442 <PROGRAM2+0x22>
			//dir_move(0, 100);
			//compass_move(100, -ultra_gap*2, -100);
		}
		else
		{
			if (max_ir < 120)
    153e:	28 37       	cpi	r18, 0x78	; 120
    1540:	31 05       	cpc	r19, r1
    1542:	24 f4       	brge	.+8      	; 0x154c <PROGRAM2+0x12c>
			{
				dir_move(ball_dir, 100);
    1544:	64 e6       	ldi	r22, 0x64	; 100
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	c4 dc       	rcall	.-1656   	; 0xed2 <dir_move>
    154a:	7b cf       	rjmp	.-266    	; 0x1442 <PROGRAM2+0x22>
			}
			else
			{
				ball_near(ball_dir, 80);
    154c:	60 e5       	ldi	r22, 0x50	; 80
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	49 dd       	rcall	.-1390   	; 0xfe4 <ball_near>
    1552:	77 cf       	rjmp	.-274    	; 0x1442 <PROGRAM2+0x22>

00001554 <main>:
	}
}

int main()
{
	init_devices();
    1554:	37 d8       	rcall	.-3986   	; 0x5c4 <init_devices>
	Lcd_Init();
    1556:	52 d8       	rcall	.-3932   	; 0x5fc <Lcd_Init>
	
	Lcd_Write_String(LINE1,"RCKA SOCCER V1.0");
    1558:	69 e0       	ldi	r22, 0x09	; 9
    155a:	72 e0       	ldi	r23, 0x02	; 2
    155c:	80 e8       	ldi	r24, 0x80	; 128
    155e:	61 d8       	rcall	.-3902   	; 0x622 <Lcd_Write_String>
	Lcd_Write_String(LINE2," ROBOCUP KOREA");
    1560:	6a e1       	ldi	r22, 0x1A	; 26
    1562:	72 e0       	ldi	r23, 0x02	; 2
    1564:	80 ec       	ldi	r24, 0xC0	; 192
    1566:	5d d8       	rcall	.-3910   	; 0x622 <Lcd_Write_String>
	
	while(!ENTER)	;
    1568:	33 99       	sbic	0x06, 3	; 6
    156a:	fe cf       	rjmp	.-4      	; 0x1568 <main+0x14>
	while(ENTER)	;
    156c:	33 9b       	sbis	0x06, 3	; 6
    156e:	fe cf       	rjmp	.-4      	; 0x156c <main+0x18>

	IIC_WRITE(SLA_W,0x02,0x00);
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	62 e0       	ldi	r22, 0x02	; 2
    1574:	8c e3       	ldi	r24, 0x3C	; 60
    1576:	dd d9       	rcall	.-3142   	; 0x932 <IIC_WRITE>
	delay1ms(200);
    1578:	88 ec       	ldi	r24, 0xC8	; 200
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 c2 00 	call	0x184	; 0x184 <delay1ms>
	IIC_WRITE(SLA_W,0x00,0x58);
    1580:	48 e5       	ldi	r20, 0x58	; 88
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	8c e3       	ldi	r24, 0x3C	; 60
    1586:	d5 d9       	rcall	.-3158   	; 0x932 <IIC_WRITE>
	delay1ms(200);
    1588:	88 ec       	ldi	r24, 0xC8	; 200
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 c2 00 	call	0x184	; 0x184 <delay1ms>
	IIC_WRITE(SLA_W,0x02,0x00);
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	62 e0       	ldi	r22, 0x02	; 2
    1594:	8c e3       	ldi	r24, 0x3C	; 60
    1596:	cd d9       	rcall	.-3174   	; 0x932 <IIC_WRITE>
	delay1ms(200);
    1598:	88 ec       	ldi	r24, 0xC8	; 200
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 c2 00 	call	0x184	; 0x184 <delay1ms>
	
	
	
	Lcd_Clear();
    15a0:	5b d9       	rcall	.-3402   	; 0x858 <Lcd_Clear>
	Lcd_Write_String(LINE1,"RCKA");	
    15a2:	69 e2       	ldi	r22, 0x29	; 41
    15a4:	72 e0       	ldi	r23, 0x02	; 2
    15a6:	80 e8       	ldi	r24, 0x80	; 128
    15a8:	3c d8       	rcall	.-3976   	; 0x622 <Lcd_Write_String>
	Lcd_Write_String(LINE2,"RUN PROGRAM 1");
    15aa:	6e e2       	ldi	r22, 0x2E	; 46
    15ac:	72 e0       	ldi	r23, 0x02	; 2
    15ae:	80 ec       	ldi	r24, 0xC0	; 192
    15b0:	38 d8       	rcall	.-3984   	; 0x622 <Lcd_Write_String>
	
	while(1)
	{
		delay1ms(200);
    15b2:	88 ec       	ldi	r24, 0xC8	; 200
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 c2 00 	call	0x184	; 0x184 <delay1ms>

		Volt_Display();
    15ba:	54 d9       	rcall	.-3416   	; 0x864 <Volt_Display>
		
		if(SELECT)
    15bc:	32 99       	sbic	0x06, 2	; 6
    15be:	0f c0       	rjmp	.+30     	; 0x15de <main+0x8a>
		{
			while(SELECT)	;
    15c0:	32 9b       	sbis	0x06, 2	; 6
    15c2:	fe cf       	rjmp	.-4      	; 0x15c0 <main+0x6c>
			menu++;
    15c4:	80 91 46 02 	lds	r24, 0x0246
    15c8:	8f 5f       	subi	r24, 0xFF	; 255
			if (menu>6)	menu=0;
    15ca:	87 30       	cpi	r24, 0x07	; 7
    15cc:	18 f4       	brcc	.+6      	; 0x15d4 <main+0x80>
		Volt_Display();
		
		if(SELECT)
		{
			while(SELECT)	;
			menu++;
    15ce:	80 93 46 02 	sts	0x0246, r24
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <main+0x84>
			if (menu>6)	menu=0;
    15d4:	10 92 46 02 	sts	0x0246, r1
			menu_display(menu);
    15d8:	80 91 46 02 	lds	r24, 0x0246
    15dc:	4a de       	rcall	.-876    	; 0x1272 <menu_display>
		}
		if(ENTER)
    15de:	33 99       	sbic	0x06, 3	; 6
    15e0:	e8 cf       	rjmp	.-48     	; 0x15b2 <main+0x5e>
		{
			while(ENTER)	;
    15e2:	33 9b       	sbis	0x06, 3	; 6
    15e4:	fe cf       	rjmp	.-4      	; 0x15e2 <main+0x8e>
			switch(menu)
    15e6:	e0 91 46 02 	lds	r30, 0x0246
    15ea:	8e 2f       	mov	r24, r30
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	87 30       	cpi	r24, 0x07	; 7
    15f0:	91 05       	cpc	r25, r1
    15f2:	78 f4       	brcc	.+30     	; 0x1612 <main+0xbe>
    15f4:	fc 01       	movw	r30, r24
    15f6:	eb 59       	subi	r30, 0x9B	; 155
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	a7 c2       	rjmp	.+1358   	; 0x1b4a <__tablejump2__>
			{
				case 0: PROGRAM1();
    15fc:	0f df       	rcall	.-482    	; 0x141c <PROGRAM1>
						break;
				case 1: PROGRAM2();
    15fe:	10 df       	rcall	.-480    	; 0x1420 <PROGRAM2>
						break;
				case 2: view_compass();
    1600:	1b de       	rcall	.-970    	; 0x1238 <view_compass>
						break;
    1602:	07 c0       	rjmp	.+14     	; 0x1612 <main+0xbe>
				case 3: view_ultra();
    1604:	de dd       	rcall	.-1092   	; 0x11c2 <view_ultra>
						break;
    1606:	05 c0       	rjmp	.+10     	; 0x1612 <main+0xbe>
				case 4: view_short_ir();
    1608:	9b dd       	rcall	.-1226   	; 0x1140 <view_short_ir>
						break;
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <main+0xbe>
				case 5: view_long_ir();;
    160c:	5c dd       	rcall	.-1352   	; 0x10c6 <view_long_ir>
						break;
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <main+0xbe>
				case 6: view_line();;
    1610:	2b dd       	rcall	.-1450   	; 0x1068 <view_line>
						break;
			}
			Lcd_Clear();
    1612:	22 d9       	rcall	.-3516   	; 0x858 <Lcd_Clear>
			Lcd_Write_String(LINE1,"RCKA");
    1614:	69 e2       	ldi	r22, 0x29	; 41
    1616:	72 e0       	ldi	r23, 0x02	; 2
    1618:	80 e8       	ldi	r24, 0x80	; 128
    161a:	03 d8       	rcall	.-4090   	; 0x622 <Lcd_Write_String>
			menu_display(menu);
    161c:	80 91 46 02 	lds	r24, 0x0246
    1620:	28 de       	rcall	.-944    	; 0x1272 <menu_display>
    1622:	c7 cf       	rjmp	.-114    	; 0x15b2 <main+0x5e>

00001624 <__subsf3>:
    1624:	50 58       	subi	r21, 0x80	; 128

00001626 <__addsf3>:
    1626:	bb 27       	eor	r27, r27
    1628:	aa 27       	eor	r26, r26
    162a:	0e d0       	rcall	.+28     	; 0x1648 <__addsf3x>
    162c:	d2 c1       	rjmp	.+932    	; 0x19d2 <__fp_round>
    162e:	c3 d1       	rcall	.+902    	; 0x19b6 <__fp_pscA>
    1630:	30 f0       	brcs	.+12     	; 0x163e <__addsf3+0x18>
    1632:	c8 d1       	rcall	.+912    	; 0x19c4 <__fp_pscB>
    1634:	20 f0       	brcs	.+8      	; 0x163e <__addsf3+0x18>
    1636:	31 f4       	brne	.+12     	; 0x1644 <__addsf3+0x1e>
    1638:	9f 3f       	cpi	r25, 0xFF	; 255
    163a:	11 f4       	brne	.+4      	; 0x1640 <__addsf3+0x1a>
    163c:	1e f4       	brtc	.+6      	; 0x1644 <__addsf3+0x1e>
    163e:	93 c1       	rjmp	.+806    	; 0x1966 <__fp_nan>
    1640:	0e f4       	brtc	.+2      	; 0x1644 <__addsf3+0x1e>
    1642:	e0 95       	com	r30
    1644:	e7 fb       	bst	r30, 7
    1646:	89 c1       	rjmp	.+786    	; 0x195a <__fp_inf>

00001648 <__addsf3x>:
    1648:	e9 2f       	mov	r30, r25
    164a:	d4 d1       	rcall	.+936    	; 0x19f4 <__fp_split3>
    164c:	80 f3       	brcs	.-32     	; 0x162e <__addsf3+0x8>
    164e:	ba 17       	cp	r27, r26
    1650:	62 07       	cpc	r22, r18
    1652:	73 07       	cpc	r23, r19
    1654:	84 07       	cpc	r24, r20
    1656:	95 07       	cpc	r25, r21
    1658:	18 f0       	brcs	.+6      	; 0x1660 <__addsf3x+0x18>
    165a:	71 f4       	brne	.+28     	; 0x1678 <__addsf3x+0x30>
    165c:	9e f5       	brtc	.+102    	; 0x16c4 <__addsf3x+0x7c>
    165e:	ec c1       	rjmp	.+984    	; 0x1a38 <__fp_zero>
    1660:	0e f4       	brtc	.+2      	; 0x1664 <__addsf3x+0x1c>
    1662:	e0 95       	com	r30
    1664:	0b 2e       	mov	r0, r27
    1666:	ba 2f       	mov	r27, r26
    1668:	a0 2d       	mov	r26, r0
    166a:	0b 01       	movw	r0, r22
    166c:	b9 01       	movw	r22, r18
    166e:	90 01       	movw	r18, r0
    1670:	0c 01       	movw	r0, r24
    1672:	ca 01       	movw	r24, r20
    1674:	a0 01       	movw	r20, r0
    1676:	11 24       	eor	r1, r1
    1678:	ff 27       	eor	r31, r31
    167a:	59 1b       	sub	r21, r25
    167c:	99 f0       	breq	.+38     	; 0x16a4 <__addsf3x+0x5c>
    167e:	59 3f       	cpi	r21, 0xF9	; 249
    1680:	50 f4       	brcc	.+20     	; 0x1696 <__addsf3x+0x4e>
    1682:	50 3e       	cpi	r21, 0xE0	; 224
    1684:	68 f1       	brcs	.+90     	; 0x16e0 <__addsf3x+0x98>
    1686:	1a 16       	cp	r1, r26
    1688:	f0 40       	sbci	r31, 0x00	; 0
    168a:	a2 2f       	mov	r26, r18
    168c:	23 2f       	mov	r18, r19
    168e:	34 2f       	mov	r19, r20
    1690:	44 27       	eor	r20, r20
    1692:	58 5f       	subi	r21, 0xF8	; 248
    1694:	f3 cf       	rjmp	.-26     	; 0x167c <__addsf3x+0x34>
    1696:	46 95       	lsr	r20
    1698:	37 95       	ror	r19
    169a:	27 95       	ror	r18
    169c:	a7 95       	ror	r26
    169e:	f0 40       	sbci	r31, 0x00	; 0
    16a0:	53 95       	inc	r21
    16a2:	c9 f7       	brne	.-14     	; 0x1696 <__addsf3x+0x4e>
    16a4:	7e f4       	brtc	.+30     	; 0x16c4 <__addsf3x+0x7c>
    16a6:	1f 16       	cp	r1, r31
    16a8:	ba 0b       	sbc	r27, r26
    16aa:	62 0b       	sbc	r22, r18
    16ac:	73 0b       	sbc	r23, r19
    16ae:	84 0b       	sbc	r24, r20
    16b0:	ba f0       	brmi	.+46     	; 0x16e0 <__addsf3x+0x98>
    16b2:	91 50       	subi	r25, 0x01	; 1
    16b4:	a1 f0       	breq	.+40     	; 0x16de <__addsf3x+0x96>
    16b6:	ff 0f       	add	r31, r31
    16b8:	bb 1f       	adc	r27, r27
    16ba:	66 1f       	adc	r22, r22
    16bc:	77 1f       	adc	r23, r23
    16be:	88 1f       	adc	r24, r24
    16c0:	c2 f7       	brpl	.-16     	; 0x16b2 <__addsf3x+0x6a>
    16c2:	0e c0       	rjmp	.+28     	; 0x16e0 <__addsf3x+0x98>
    16c4:	ba 0f       	add	r27, r26
    16c6:	62 1f       	adc	r22, r18
    16c8:	73 1f       	adc	r23, r19
    16ca:	84 1f       	adc	r24, r20
    16cc:	48 f4       	brcc	.+18     	; 0x16e0 <__addsf3x+0x98>
    16ce:	87 95       	ror	r24
    16d0:	77 95       	ror	r23
    16d2:	67 95       	ror	r22
    16d4:	b7 95       	ror	r27
    16d6:	f7 95       	ror	r31
    16d8:	9e 3f       	cpi	r25, 0xFE	; 254
    16da:	08 f0       	brcs	.+2      	; 0x16de <__addsf3x+0x96>
    16dc:	b3 cf       	rjmp	.-154    	; 0x1644 <__addsf3+0x1e>
    16de:	93 95       	inc	r25
    16e0:	88 0f       	add	r24, r24
    16e2:	08 f0       	brcs	.+2      	; 0x16e6 <__addsf3x+0x9e>
    16e4:	99 27       	eor	r25, r25
    16e6:	ee 0f       	add	r30, r30
    16e8:	97 95       	ror	r25
    16ea:	87 95       	ror	r24
    16ec:	08 95       	ret
    16ee:	63 d1       	rcall	.+710    	; 0x19b6 <__fp_pscA>
    16f0:	58 f0       	brcs	.+22     	; 0x1708 <__addsf3x+0xc0>
    16f2:	80 e8       	ldi	r24, 0x80	; 128
    16f4:	91 e0       	ldi	r25, 0x01	; 1
    16f6:	09 f4       	brne	.+2      	; 0x16fa <__addsf3x+0xb2>
    16f8:	9e ef       	ldi	r25, 0xFE	; 254
    16fa:	64 d1       	rcall	.+712    	; 0x19c4 <__fp_pscB>
    16fc:	28 f0       	brcs	.+10     	; 0x1708 <__addsf3x+0xc0>
    16fe:	40 e8       	ldi	r20, 0x80	; 128
    1700:	51 e0       	ldi	r21, 0x01	; 1
    1702:	59 f4       	brne	.+22     	; 0x171a <atan2+0xe>
    1704:	5e ef       	ldi	r21, 0xFE	; 254
    1706:	09 c0       	rjmp	.+18     	; 0x171a <atan2+0xe>
    1708:	2e c1       	rjmp	.+604    	; 0x1966 <__fp_nan>
    170a:	96 c1       	rjmp	.+812    	; 0x1a38 <__fp_zero>

0000170c <atan2>:
    170c:	e9 2f       	mov	r30, r25
    170e:	e0 78       	andi	r30, 0x80	; 128
    1710:	71 d1       	rcall	.+738    	; 0x19f4 <__fp_split3>
    1712:	68 f3       	brcs	.-38     	; 0x16ee <__addsf3x+0xa6>
    1714:	09 2e       	mov	r0, r25
    1716:	05 2a       	or	r0, r21
    1718:	c1 f3       	breq	.-16     	; 0x170a <__addsf3x+0xc2>
    171a:	26 17       	cp	r18, r22
    171c:	37 07       	cpc	r19, r23
    171e:	48 07       	cpc	r20, r24
    1720:	59 07       	cpc	r21, r25
    1722:	38 f0       	brcs	.+14     	; 0x1732 <atan2+0x26>
    1724:	0e 2e       	mov	r0, r30
    1726:	07 f8       	bld	r0, 7
    1728:	e0 25       	eor	r30, r0
    172a:	69 f0       	breq	.+26     	; 0x1746 <atan2+0x3a>
    172c:	e0 25       	eor	r30, r0
    172e:	e0 64       	ori	r30, 0x40	; 64
    1730:	0a c0       	rjmp	.+20     	; 0x1746 <atan2+0x3a>
    1732:	ef 63       	ori	r30, 0x3F	; 63
    1734:	07 f8       	bld	r0, 7
    1736:	00 94       	com	r0
    1738:	07 fa       	bst	r0, 7
    173a:	db 01       	movw	r26, r22
    173c:	b9 01       	movw	r22, r18
    173e:	9d 01       	movw	r18, r26
    1740:	dc 01       	movw	r26, r24
    1742:	ca 01       	movw	r24, r20
    1744:	ad 01       	movw	r20, r26
    1746:	ef 93       	push	r30
    1748:	41 d0       	rcall	.+130    	; 0x17cc <__divsf3_pse>
    174a:	43 d1       	rcall	.+646    	; 0x19d2 <__fp_round>
    174c:	0a d0       	rcall	.+20     	; 0x1762 <atan>
    174e:	5f 91       	pop	r21
    1750:	55 23       	and	r21, r21
    1752:	31 f0       	breq	.+12     	; 0x1760 <atan2+0x54>
    1754:	2b ed       	ldi	r18, 0xDB	; 219
    1756:	3f e0       	ldi	r19, 0x0F	; 15
    1758:	49 e4       	ldi	r20, 0x49	; 73
    175a:	50 fd       	sbrc	r21, 0
    175c:	49 ec       	ldi	r20, 0xC9	; 201
    175e:	63 cf       	rjmp	.-314    	; 0x1626 <__addsf3>
    1760:	08 95       	ret

00001762 <atan>:
    1762:	df 93       	push	r29
    1764:	dd 27       	eor	r29, r29
    1766:	b9 2f       	mov	r27, r25
    1768:	bf 77       	andi	r27, 0x7F	; 127
    176a:	40 e8       	ldi	r20, 0x80	; 128
    176c:	5f e3       	ldi	r21, 0x3F	; 63
    176e:	16 16       	cp	r1, r22
    1770:	17 06       	cpc	r1, r23
    1772:	48 07       	cpc	r20, r24
    1774:	5b 07       	cpc	r21, r27
    1776:	10 f4       	brcc	.+4      	; 0x177c <atan+0x1a>
    1778:	d9 2f       	mov	r29, r25
    177a:	65 d1       	rcall	.+714    	; 0x1a46 <inverse>
    177c:	9f 93       	push	r25
    177e:	8f 93       	push	r24
    1780:	7f 93       	push	r23
    1782:	6f 93       	push	r22
    1784:	ca d1       	rcall	.+916    	; 0x1b1a <square>
    1786:	e8 ed       	ldi	r30, 0xD8	; 216
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	f0 d0       	rcall	.+480    	; 0x196c <__fp_powser>
    178c:	22 d1       	rcall	.+580    	; 0x19d2 <__fp_round>
    178e:	2f 91       	pop	r18
    1790:	3f 91       	pop	r19
    1792:	4f 91       	pop	r20
    1794:	5f 91       	pop	r21
    1796:	6a d1       	rcall	.+724    	; 0x1a6c <__mulsf3x>
    1798:	dd 23       	and	r29, r29
    179a:	49 f0       	breq	.+18     	; 0x17ae <atan+0x4c>
    179c:	90 58       	subi	r25, 0x80	; 128
    179e:	a2 ea       	ldi	r26, 0xA2	; 162
    17a0:	2a ed       	ldi	r18, 0xDA	; 218
    17a2:	3f e0       	ldi	r19, 0x0F	; 15
    17a4:	49 ec       	ldi	r20, 0xC9	; 201
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	d0 78       	andi	r29, 0x80	; 128
    17aa:	5d 27       	eor	r21, r29
    17ac:	4d df       	rcall	.-358    	; 0x1648 <__addsf3x>
    17ae:	df 91       	pop	r29
    17b0:	10 c1       	rjmp	.+544    	; 0x19d2 <__fp_round>
    17b2:	08 d1       	rcall	.+528    	; 0x19c4 <__fp_pscB>
    17b4:	40 f0       	brcs	.+16     	; 0x17c6 <atan+0x64>
    17b6:	ff d0       	rcall	.+510    	; 0x19b6 <__fp_pscA>
    17b8:	30 f0       	brcs	.+12     	; 0x17c6 <atan+0x64>
    17ba:	21 f4       	brne	.+8      	; 0x17c4 <atan+0x62>
    17bc:	5f 3f       	cpi	r21, 0xFF	; 255
    17be:	19 f0       	breq	.+6      	; 0x17c6 <atan+0x64>
    17c0:	cc c0       	rjmp	.+408    	; 0x195a <__fp_inf>
    17c2:	51 11       	cpse	r21, r1
    17c4:	3a c1       	rjmp	.+628    	; 0x1a3a <__fp_szero>
    17c6:	cf c0       	rjmp	.+414    	; 0x1966 <__fp_nan>

000017c8 <__divsf3x>:
    17c8:	15 d1       	rcall	.+554    	; 0x19f4 <__fp_split3>
    17ca:	98 f3       	brcs	.-26     	; 0x17b2 <atan+0x50>

000017cc <__divsf3_pse>:
    17cc:	99 23       	and	r25, r25
    17ce:	c9 f3       	breq	.-14     	; 0x17c2 <atan+0x60>
    17d0:	55 23       	and	r21, r21
    17d2:	b1 f3       	breq	.-20     	; 0x17c0 <atan+0x5e>
    17d4:	95 1b       	sub	r25, r21
    17d6:	55 0b       	sbc	r21, r21
    17d8:	bb 27       	eor	r27, r27
    17da:	aa 27       	eor	r26, r26
    17dc:	62 17       	cp	r22, r18
    17de:	73 07       	cpc	r23, r19
    17e0:	84 07       	cpc	r24, r20
    17e2:	38 f0       	brcs	.+14     	; 0x17f2 <__divsf3_pse+0x26>
    17e4:	9f 5f       	subi	r25, 0xFF	; 255
    17e6:	5f 4f       	sbci	r21, 0xFF	; 255
    17e8:	22 0f       	add	r18, r18
    17ea:	33 1f       	adc	r19, r19
    17ec:	44 1f       	adc	r20, r20
    17ee:	aa 1f       	adc	r26, r26
    17f0:	a9 f3       	breq	.-22     	; 0x17dc <__divsf3_pse+0x10>
    17f2:	33 d0       	rcall	.+102    	; 0x185a <__divsf3_pse+0x8e>
    17f4:	0e 2e       	mov	r0, r30
    17f6:	3a f0       	brmi	.+14     	; 0x1806 <__divsf3_pse+0x3a>
    17f8:	e0 e8       	ldi	r30, 0x80	; 128
    17fa:	30 d0       	rcall	.+96     	; 0x185c <__divsf3_pse+0x90>
    17fc:	91 50       	subi	r25, 0x01	; 1
    17fe:	50 40       	sbci	r21, 0x00	; 0
    1800:	e6 95       	lsr	r30
    1802:	00 1c       	adc	r0, r0
    1804:	ca f7       	brpl	.-14     	; 0x17f8 <__divsf3_pse+0x2c>
    1806:	29 d0       	rcall	.+82     	; 0x185a <__divsf3_pse+0x8e>
    1808:	fe 2f       	mov	r31, r30
    180a:	27 d0       	rcall	.+78     	; 0x185a <__divsf3_pse+0x8e>
    180c:	66 0f       	add	r22, r22
    180e:	77 1f       	adc	r23, r23
    1810:	88 1f       	adc	r24, r24
    1812:	bb 1f       	adc	r27, r27
    1814:	26 17       	cp	r18, r22
    1816:	37 07       	cpc	r19, r23
    1818:	48 07       	cpc	r20, r24
    181a:	ab 07       	cpc	r26, r27
    181c:	b0 e8       	ldi	r27, 0x80	; 128
    181e:	09 f0       	breq	.+2      	; 0x1822 <__divsf3_pse+0x56>
    1820:	bb 0b       	sbc	r27, r27
    1822:	80 2d       	mov	r24, r0
    1824:	bf 01       	movw	r22, r30
    1826:	ff 27       	eor	r31, r31
    1828:	93 58       	subi	r25, 0x83	; 131
    182a:	5f 4f       	sbci	r21, 0xFF	; 255
    182c:	2a f0       	brmi	.+10     	; 0x1838 <__divsf3_pse+0x6c>
    182e:	9e 3f       	cpi	r25, 0xFE	; 254
    1830:	51 05       	cpc	r21, r1
    1832:	68 f0       	brcs	.+26     	; 0x184e <__divsf3_pse+0x82>
    1834:	92 c0       	rjmp	.+292    	; 0x195a <__fp_inf>
    1836:	01 c1       	rjmp	.+514    	; 0x1a3a <__fp_szero>
    1838:	5f 3f       	cpi	r21, 0xFF	; 255
    183a:	ec f3       	brlt	.-6      	; 0x1836 <__divsf3_pse+0x6a>
    183c:	98 3e       	cpi	r25, 0xE8	; 232
    183e:	dc f3       	brlt	.-10     	; 0x1836 <__divsf3_pse+0x6a>
    1840:	86 95       	lsr	r24
    1842:	77 95       	ror	r23
    1844:	67 95       	ror	r22
    1846:	b7 95       	ror	r27
    1848:	f7 95       	ror	r31
    184a:	9f 5f       	subi	r25, 0xFF	; 255
    184c:	c9 f7       	brne	.-14     	; 0x1840 <__divsf3_pse+0x74>
    184e:	88 0f       	add	r24, r24
    1850:	91 1d       	adc	r25, r1
    1852:	96 95       	lsr	r25
    1854:	87 95       	ror	r24
    1856:	97 f9       	bld	r25, 7
    1858:	08 95       	ret
    185a:	e1 e0       	ldi	r30, 0x01	; 1
    185c:	66 0f       	add	r22, r22
    185e:	77 1f       	adc	r23, r23
    1860:	88 1f       	adc	r24, r24
    1862:	bb 1f       	adc	r27, r27
    1864:	62 17       	cp	r22, r18
    1866:	73 07       	cpc	r23, r19
    1868:	84 07       	cpc	r24, r20
    186a:	ba 07       	cpc	r27, r26
    186c:	20 f0       	brcs	.+8      	; 0x1876 <__divsf3_pse+0xaa>
    186e:	62 1b       	sub	r22, r18
    1870:	73 0b       	sbc	r23, r19
    1872:	84 0b       	sbc	r24, r20
    1874:	ba 0b       	sbc	r27, r26
    1876:	ee 1f       	adc	r30, r30
    1878:	88 f7       	brcc	.-30     	; 0x185c <__divsf3_pse+0x90>
    187a:	e0 95       	com	r30
    187c:	08 95       	ret

0000187e <__fixsfsi>:
    187e:	04 d0       	rcall	.+8      	; 0x1888 <__fixunssfsi>
    1880:	68 94       	set
    1882:	b1 11       	cpse	r27, r1
    1884:	da c0       	rjmp	.+436    	; 0x1a3a <__fp_szero>
    1886:	08 95       	ret

00001888 <__fixunssfsi>:
    1888:	bd d0       	rcall	.+378    	; 0x1a04 <__fp_splitA>
    188a:	88 f0       	brcs	.+34     	; 0x18ae <__fixunssfsi+0x26>
    188c:	9f 57       	subi	r25, 0x7F	; 127
    188e:	90 f0       	brcs	.+36     	; 0x18b4 <__fixunssfsi+0x2c>
    1890:	b9 2f       	mov	r27, r25
    1892:	99 27       	eor	r25, r25
    1894:	b7 51       	subi	r27, 0x17	; 23
    1896:	a0 f0       	brcs	.+40     	; 0x18c0 <__fixunssfsi+0x38>
    1898:	d1 f0       	breq	.+52     	; 0x18ce <__fixunssfsi+0x46>
    189a:	66 0f       	add	r22, r22
    189c:	77 1f       	adc	r23, r23
    189e:	88 1f       	adc	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	1a f0       	brmi	.+6      	; 0x18aa <__fixunssfsi+0x22>
    18a4:	ba 95       	dec	r27
    18a6:	c9 f7       	brne	.-14     	; 0x189a <__fixunssfsi+0x12>
    18a8:	12 c0       	rjmp	.+36     	; 0x18ce <__fixunssfsi+0x46>
    18aa:	b1 30       	cpi	r27, 0x01	; 1
    18ac:	81 f0       	breq	.+32     	; 0x18ce <__fixunssfsi+0x46>
    18ae:	c4 d0       	rcall	.+392    	; 0x1a38 <__fp_zero>
    18b0:	b1 e0       	ldi	r27, 0x01	; 1
    18b2:	08 95       	ret
    18b4:	c1 c0       	rjmp	.+386    	; 0x1a38 <__fp_zero>
    18b6:	67 2f       	mov	r22, r23
    18b8:	78 2f       	mov	r23, r24
    18ba:	88 27       	eor	r24, r24
    18bc:	b8 5f       	subi	r27, 0xF8	; 248
    18be:	39 f0       	breq	.+14     	; 0x18ce <__fixunssfsi+0x46>
    18c0:	b9 3f       	cpi	r27, 0xF9	; 249
    18c2:	cc f3       	brlt	.-14     	; 0x18b6 <__fixunssfsi+0x2e>
    18c4:	86 95       	lsr	r24
    18c6:	77 95       	ror	r23
    18c8:	67 95       	ror	r22
    18ca:	b3 95       	inc	r27
    18cc:	d9 f7       	brne	.-10     	; 0x18c4 <__fixunssfsi+0x3c>
    18ce:	3e f4       	brtc	.+14     	; 0x18de <__fixunssfsi+0x56>
    18d0:	90 95       	com	r25
    18d2:	80 95       	com	r24
    18d4:	70 95       	com	r23
    18d6:	61 95       	neg	r22
    18d8:	7f 4f       	sbci	r23, 0xFF	; 255
    18da:	8f 4f       	sbci	r24, 0xFF	; 255
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	08 95       	ret

000018e0 <__floatunsisf>:
    18e0:	e8 94       	clt
    18e2:	09 c0       	rjmp	.+18     	; 0x18f6 <__floatsisf+0x12>

000018e4 <__floatsisf>:
    18e4:	97 fb       	bst	r25, 7
    18e6:	3e f4       	brtc	.+14     	; 0x18f6 <__floatsisf+0x12>
    18e8:	90 95       	com	r25
    18ea:	80 95       	com	r24
    18ec:	70 95       	com	r23
    18ee:	61 95       	neg	r22
    18f0:	7f 4f       	sbci	r23, 0xFF	; 255
    18f2:	8f 4f       	sbci	r24, 0xFF	; 255
    18f4:	9f 4f       	sbci	r25, 0xFF	; 255
    18f6:	99 23       	and	r25, r25
    18f8:	a9 f0       	breq	.+42     	; 0x1924 <__floatsisf+0x40>
    18fa:	f9 2f       	mov	r31, r25
    18fc:	96 e9       	ldi	r25, 0x96	; 150
    18fe:	bb 27       	eor	r27, r27
    1900:	93 95       	inc	r25
    1902:	f6 95       	lsr	r31
    1904:	87 95       	ror	r24
    1906:	77 95       	ror	r23
    1908:	67 95       	ror	r22
    190a:	b7 95       	ror	r27
    190c:	f1 11       	cpse	r31, r1
    190e:	f8 cf       	rjmp	.-16     	; 0x1900 <__floatsisf+0x1c>
    1910:	fa f4       	brpl	.+62     	; 0x1950 <__floatsisf+0x6c>
    1912:	bb 0f       	add	r27, r27
    1914:	11 f4       	brne	.+4      	; 0x191a <__floatsisf+0x36>
    1916:	60 ff       	sbrs	r22, 0
    1918:	1b c0       	rjmp	.+54     	; 0x1950 <__floatsisf+0x6c>
    191a:	6f 5f       	subi	r22, 0xFF	; 255
    191c:	7f 4f       	sbci	r23, 0xFF	; 255
    191e:	8f 4f       	sbci	r24, 0xFF	; 255
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	16 c0       	rjmp	.+44     	; 0x1950 <__floatsisf+0x6c>
    1924:	88 23       	and	r24, r24
    1926:	11 f0       	breq	.+4      	; 0x192c <__floatsisf+0x48>
    1928:	96 e9       	ldi	r25, 0x96	; 150
    192a:	11 c0       	rjmp	.+34     	; 0x194e <__floatsisf+0x6a>
    192c:	77 23       	and	r23, r23
    192e:	21 f0       	breq	.+8      	; 0x1938 <__floatsisf+0x54>
    1930:	9e e8       	ldi	r25, 0x8E	; 142
    1932:	87 2f       	mov	r24, r23
    1934:	76 2f       	mov	r23, r22
    1936:	05 c0       	rjmp	.+10     	; 0x1942 <__floatsisf+0x5e>
    1938:	66 23       	and	r22, r22
    193a:	71 f0       	breq	.+28     	; 0x1958 <__floatsisf+0x74>
    193c:	96 e8       	ldi	r25, 0x86	; 134
    193e:	86 2f       	mov	r24, r22
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	2a f0       	brmi	.+10     	; 0x1950 <__floatsisf+0x6c>
    1946:	9a 95       	dec	r25
    1948:	66 0f       	add	r22, r22
    194a:	77 1f       	adc	r23, r23
    194c:	88 1f       	adc	r24, r24
    194e:	da f7       	brpl	.-10     	; 0x1946 <__floatsisf+0x62>
    1950:	88 0f       	add	r24, r24
    1952:	96 95       	lsr	r25
    1954:	87 95       	ror	r24
    1956:	97 f9       	bld	r25, 7
    1958:	08 95       	ret

0000195a <__fp_inf>:
    195a:	97 f9       	bld	r25, 7
    195c:	9f 67       	ori	r25, 0x7F	; 127
    195e:	80 e8       	ldi	r24, 0x80	; 128
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	60 e0       	ldi	r22, 0x00	; 0
    1964:	08 95       	ret

00001966 <__fp_nan>:
    1966:	9f ef       	ldi	r25, 0xFF	; 255
    1968:	80 ec       	ldi	r24, 0xC0	; 192
    196a:	08 95       	ret

0000196c <__fp_powser>:
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	1f 93       	push	r17
    1972:	0f 93       	push	r16
    1974:	ff 92       	push	r15
    1976:	ef 92       	push	r14
    1978:	df 92       	push	r13
    197a:	7b 01       	movw	r14, r22
    197c:	8c 01       	movw	r16, r24
    197e:	68 94       	set
    1980:	05 c0       	rjmp	.+10     	; 0x198c <__fp_powser+0x20>
    1982:	da 2e       	mov	r13, r26
    1984:	ef 01       	movw	r28, r30
    1986:	72 d0       	rcall	.+228    	; 0x1a6c <__mulsf3x>
    1988:	fe 01       	movw	r30, r28
    198a:	e8 94       	clt
    198c:	a5 91       	lpm	r26, Z+
    198e:	25 91       	lpm	r18, Z+
    1990:	35 91       	lpm	r19, Z+
    1992:	45 91       	lpm	r20, Z+
    1994:	55 91       	lpm	r21, Z+
    1996:	ae f3       	brts	.-22     	; 0x1982 <__fp_powser+0x16>
    1998:	ef 01       	movw	r28, r30
    199a:	56 de       	rcall	.-852    	; 0x1648 <__addsf3x>
    199c:	fe 01       	movw	r30, r28
    199e:	97 01       	movw	r18, r14
    19a0:	a8 01       	movw	r20, r16
    19a2:	da 94       	dec	r13
    19a4:	79 f7       	brne	.-34     	; 0x1984 <__fp_powser+0x18>
    19a6:	df 90       	pop	r13
    19a8:	ef 90       	pop	r14
    19aa:	ff 90       	pop	r15
    19ac:	0f 91       	pop	r16
    19ae:	1f 91       	pop	r17
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <__fp_pscA>:
    19b6:	00 24       	eor	r0, r0
    19b8:	0a 94       	dec	r0
    19ba:	16 16       	cp	r1, r22
    19bc:	17 06       	cpc	r1, r23
    19be:	18 06       	cpc	r1, r24
    19c0:	09 06       	cpc	r0, r25
    19c2:	08 95       	ret

000019c4 <__fp_pscB>:
    19c4:	00 24       	eor	r0, r0
    19c6:	0a 94       	dec	r0
    19c8:	12 16       	cp	r1, r18
    19ca:	13 06       	cpc	r1, r19
    19cc:	14 06       	cpc	r1, r20
    19ce:	05 06       	cpc	r0, r21
    19d0:	08 95       	ret

000019d2 <__fp_round>:
    19d2:	09 2e       	mov	r0, r25
    19d4:	03 94       	inc	r0
    19d6:	00 0c       	add	r0, r0
    19d8:	11 f4       	brne	.+4      	; 0x19de <__fp_round+0xc>
    19da:	88 23       	and	r24, r24
    19dc:	52 f0       	brmi	.+20     	; 0x19f2 <__fp_round+0x20>
    19de:	bb 0f       	add	r27, r27
    19e0:	40 f4       	brcc	.+16     	; 0x19f2 <__fp_round+0x20>
    19e2:	bf 2b       	or	r27, r31
    19e4:	11 f4       	brne	.+4      	; 0x19ea <__fp_round+0x18>
    19e6:	60 ff       	sbrs	r22, 0
    19e8:	04 c0       	rjmp	.+8      	; 0x19f2 <__fp_round+0x20>
    19ea:	6f 5f       	subi	r22, 0xFF	; 255
    19ec:	7f 4f       	sbci	r23, 0xFF	; 255
    19ee:	8f 4f       	sbci	r24, 0xFF	; 255
    19f0:	9f 4f       	sbci	r25, 0xFF	; 255
    19f2:	08 95       	ret

000019f4 <__fp_split3>:
    19f4:	57 fd       	sbrc	r21, 7
    19f6:	90 58       	subi	r25, 0x80	; 128
    19f8:	44 0f       	add	r20, r20
    19fa:	55 1f       	adc	r21, r21
    19fc:	59 f0       	breq	.+22     	; 0x1a14 <__fp_splitA+0x10>
    19fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1a00:	71 f0       	breq	.+28     	; 0x1a1e <__fp_splitA+0x1a>
    1a02:	47 95       	ror	r20

00001a04 <__fp_splitA>:
    1a04:	88 0f       	add	r24, r24
    1a06:	97 fb       	bst	r25, 7
    1a08:	99 1f       	adc	r25, r25
    1a0a:	61 f0       	breq	.+24     	; 0x1a24 <__fp_splitA+0x20>
    1a0c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a0e:	79 f0       	breq	.+30     	; 0x1a2e <__fp_splitA+0x2a>
    1a10:	87 95       	ror	r24
    1a12:	08 95       	ret
    1a14:	12 16       	cp	r1, r18
    1a16:	13 06       	cpc	r1, r19
    1a18:	14 06       	cpc	r1, r20
    1a1a:	55 1f       	adc	r21, r21
    1a1c:	f2 cf       	rjmp	.-28     	; 0x1a02 <__fp_split3+0xe>
    1a1e:	46 95       	lsr	r20
    1a20:	f1 df       	rcall	.-30     	; 0x1a04 <__fp_splitA>
    1a22:	08 c0       	rjmp	.+16     	; 0x1a34 <__fp_splitA+0x30>
    1a24:	16 16       	cp	r1, r22
    1a26:	17 06       	cpc	r1, r23
    1a28:	18 06       	cpc	r1, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	f1 cf       	rjmp	.-30     	; 0x1a10 <__fp_splitA+0xc>
    1a2e:	86 95       	lsr	r24
    1a30:	71 05       	cpc	r23, r1
    1a32:	61 05       	cpc	r22, r1
    1a34:	08 94       	sec
    1a36:	08 95       	ret

00001a38 <__fp_zero>:
    1a38:	e8 94       	clt

00001a3a <__fp_szero>:
    1a3a:	bb 27       	eor	r27, r27
    1a3c:	66 27       	eor	r22, r22
    1a3e:	77 27       	eor	r23, r23
    1a40:	cb 01       	movw	r24, r22
    1a42:	97 f9       	bld	r25, 7
    1a44:	08 95       	ret

00001a46 <inverse>:
    1a46:	9b 01       	movw	r18, r22
    1a48:	ac 01       	movw	r20, r24
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	80 e8       	ldi	r24, 0x80	; 128
    1a50:	9f e3       	ldi	r25, 0x3F	; 63
    1a52:	66 c0       	rjmp	.+204    	; 0x1b20 <__divsf3>

00001a54 <__mulsf3>:
    1a54:	0b d0       	rcall	.+22     	; 0x1a6c <__mulsf3x>
    1a56:	bd cf       	rjmp	.-134    	; 0x19d2 <__fp_round>
    1a58:	ae df       	rcall	.-164    	; 0x19b6 <__fp_pscA>
    1a5a:	28 f0       	brcs	.+10     	; 0x1a66 <__mulsf3+0x12>
    1a5c:	b3 df       	rcall	.-154    	; 0x19c4 <__fp_pscB>
    1a5e:	18 f0       	brcs	.+6      	; 0x1a66 <__mulsf3+0x12>
    1a60:	95 23       	and	r25, r21
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <__mulsf3+0x12>
    1a64:	7a cf       	rjmp	.-268    	; 0x195a <__fp_inf>
    1a66:	7f cf       	rjmp	.-258    	; 0x1966 <__fp_nan>
    1a68:	11 24       	eor	r1, r1
    1a6a:	e7 cf       	rjmp	.-50     	; 0x1a3a <__fp_szero>

00001a6c <__mulsf3x>:
    1a6c:	c3 df       	rcall	.-122    	; 0x19f4 <__fp_split3>
    1a6e:	a0 f3       	brcs	.-24     	; 0x1a58 <__mulsf3+0x4>

00001a70 <__mulsf3_pse>:
    1a70:	95 9f       	mul	r25, r21
    1a72:	d1 f3       	breq	.-12     	; 0x1a68 <__mulsf3+0x14>
    1a74:	95 0f       	add	r25, r21
    1a76:	50 e0       	ldi	r21, 0x00	; 0
    1a78:	55 1f       	adc	r21, r21
    1a7a:	62 9f       	mul	r22, r18
    1a7c:	f0 01       	movw	r30, r0
    1a7e:	72 9f       	mul	r23, r18
    1a80:	bb 27       	eor	r27, r27
    1a82:	f0 0d       	add	r31, r0
    1a84:	b1 1d       	adc	r27, r1
    1a86:	63 9f       	mul	r22, r19
    1a88:	aa 27       	eor	r26, r26
    1a8a:	f0 0d       	add	r31, r0
    1a8c:	b1 1d       	adc	r27, r1
    1a8e:	aa 1f       	adc	r26, r26
    1a90:	64 9f       	mul	r22, r20
    1a92:	66 27       	eor	r22, r22
    1a94:	b0 0d       	add	r27, r0
    1a96:	a1 1d       	adc	r26, r1
    1a98:	66 1f       	adc	r22, r22
    1a9a:	82 9f       	mul	r24, r18
    1a9c:	22 27       	eor	r18, r18
    1a9e:	b0 0d       	add	r27, r0
    1aa0:	a1 1d       	adc	r26, r1
    1aa2:	62 1f       	adc	r22, r18
    1aa4:	73 9f       	mul	r23, r19
    1aa6:	b0 0d       	add	r27, r0
    1aa8:	a1 1d       	adc	r26, r1
    1aaa:	62 1f       	adc	r22, r18
    1aac:	83 9f       	mul	r24, r19
    1aae:	a0 0d       	add	r26, r0
    1ab0:	61 1d       	adc	r22, r1
    1ab2:	22 1f       	adc	r18, r18
    1ab4:	74 9f       	mul	r23, r20
    1ab6:	33 27       	eor	r19, r19
    1ab8:	a0 0d       	add	r26, r0
    1aba:	61 1d       	adc	r22, r1
    1abc:	23 1f       	adc	r18, r19
    1abe:	84 9f       	mul	r24, r20
    1ac0:	60 0d       	add	r22, r0
    1ac2:	21 1d       	adc	r18, r1
    1ac4:	82 2f       	mov	r24, r18
    1ac6:	76 2f       	mov	r23, r22
    1ac8:	6a 2f       	mov	r22, r26
    1aca:	11 24       	eor	r1, r1
    1acc:	9f 57       	subi	r25, 0x7F	; 127
    1ace:	50 40       	sbci	r21, 0x00	; 0
    1ad0:	8a f0       	brmi	.+34     	; 0x1af4 <__mulsf3_pse+0x84>
    1ad2:	e1 f0       	breq	.+56     	; 0x1b0c <__mulsf3_pse+0x9c>
    1ad4:	88 23       	and	r24, r24
    1ad6:	4a f0       	brmi	.+18     	; 0x1aea <__mulsf3_pse+0x7a>
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	bb 1f       	adc	r27, r27
    1ade:	66 1f       	adc	r22, r22
    1ae0:	77 1f       	adc	r23, r23
    1ae2:	88 1f       	adc	r24, r24
    1ae4:	91 50       	subi	r25, 0x01	; 1
    1ae6:	50 40       	sbci	r21, 0x00	; 0
    1ae8:	a9 f7       	brne	.-22     	; 0x1ad4 <__mulsf3_pse+0x64>
    1aea:	9e 3f       	cpi	r25, 0xFE	; 254
    1aec:	51 05       	cpc	r21, r1
    1aee:	70 f0       	brcs	.+28     	; 0x1b0c <__mulsf3_pse+0x9c>
    1af0:	34 cf       	rjmp	.-408    	; 0x195a <__fp_inf>
    1af2:	a3 cf       	rjmp	.-186    	; 0x1a3a <__fp_szero>
    1af4:	5f 3f       	cpi	r21, 0xFF	; 255
    1af6:	ec f3       	brlt	.-6      	; 0x1af2 <__mulsf3_pse+0x82>
    1af8:	98 3e       	cpi	r25, 0xE8	; 232
    1afa:	dc f3       	brlt	.-10     	; 0x1af2 <__mulsf3_pse+0x82>
    1afc:	86 95       	lsr	r24
    1afe:	77 95       	ror	r23
    1b00:	67 95       	ror	r22
    1b02:	b7 95       	ror	r27
    1b04:	f7 95       	ror	r31
    1b06:	e7 95       	ror	r30
    1b08:	9f 5f       	subi	r25, 0xFF	; 255
    1b0a:	c1 f7       	brne	.-16     	; 0x1afc <__mulsf3_pse+0x8c>
    1b0c:	fe 2b       	or	r31, r30
    1b0e:	88 0f       	add	r24, r24
    1b10:	91 1d       	adc	r25, r1
    1b12:	96 95       	lsr	r25
    1b14:	87 95       	ror	r24
    1b16:	97 f9       	bld	r25, 7
    1b18:	08 95       	ret

00001b1a <square>:
    1b1a:	9b 01       	movw	r18, r22
    1b1c:	ac 01       	movw	r20, r24
    1b1e:	9a cf       	rjmp	.-204    	; 0x1a54 <__mulsf3>

00001b20 <__divsf3>:
    1b20:	53 de       	rcall	.-858    	; 0x17c8 <__divsf3x>
    1b22:	57 cf       	rjmp	.-338    	; 0x19d2 <__fp_round>

00001b24 <__divmodhi4>:
    1b24:	97 fb       	bst	r25, 7
    1b26:	07 2e       	mov	r0, r23
    1b28:	16 f4       	brtc	.+4      	; 0x1b2e <__divmodhi4+0xa>
    1b2a:	00 94       	com	r0
    1b2c:	06 d0       	rcall	.+12     	; 0x1b3a <__divmodhi4_neg1>
    1b2e:	77 fd       	sbrc	r23, 7
    1b30:	08 d0       	rcall	.+16     	; 0x1b42 <__divmodhi4_neg2>
    1b32:	23 d0       	rcall	.+70     	; 0x1b7a <__udivmodhi4>
    1b34:	07 fc       	sbrc	r0, 7
    1b36:	05 d0       	rcall	.+10     	; 0x1b42 <__divmodhi4_neg2>
    1b38:	3e f4       	brtc	.+14     	; 0x1b48 <__divmodhi4_exit>

00001b3a <__divmodhi4_neg1>:
    1b3a:	90 95       	com	r25
    1b3c:	81 95       	neg	r24
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	08 95       	ret

00001b42 <__divmodhi4_neg2>:
    1b42:	70 95       	com	r23
    1b44:	61 95       	neg	r22
    1b46:	7f 4f       	sbci	r23, 0xFF	; 255

00001b48 <__divmodhi4_exit>:
    1b48:	08 95       	ret

00001b4a <__tablejump2__>:
    1b4a:	ee 0f       	add	r30, r30
    1b4c:	ff 1f       	adc	r31, r31
    1b4e:	00 24       	eor	r0, r0
    1b50:	00 1c       	adc	r0, r0
    1b52:	0b be       	out	0x3b, r0	; 59
    1b54:	07 90       	elpm	r0, Z+
    1b56:	f6 91       	elpm	r31, Z
    1b58:	e0 2d       	mov	r30, r0
    1b5a:	09 94       	ijmp

00001b5c <__umulhisi3>:
    1b5c:	a2 9f       	mul	r26, r18
    1b5e:	b0 01       	movw	r22, r0
    1b60:	b3 9f       	mul	r27, r19
    1b62:	c0 01       	movw	r24, r0
    1b64:	a3 9f       	mul	r26, r19
    1b66:	70 0d       	add	r23, r0
    1b68:	81 1d       	adc	r24, r1
    1b6a:	11 24       	eor	r1, r1
    1b6c:	91 1d       	adc	r25, r1
    1b6e:	b2 9f       	mul	r27, r18
    1b70:	70 0d       	add	r23, r0
    1b72:	81 1d       	adc	r24, r1
    1b74:	11 24       	eor	r1, r1
    1b76:	91 1d       	adc	r25, r1
    1b78:	08 95       	ret

00001b7a <__udivmodhi4>:
    1b7a:	aa 1b       	sub	r26, r26
    1b7c:	bb 1b       	sub	r27, r27
    1b7e:	51 e1       	ldi	r21, 0x11	; 17
    1b80:	07 c0       	rjmp	.+14     	; 0x1b90 <__udivmodhi4_ep>

00001b82 <__udivmodhi4_loop>:
    1b82:	aa 1f       	adc	r26, r26
    1b84:	bb 1f       	adc	r27, r27
    1b86:	a6 17       	cp	r26, r22
    1b88:	b7 07       	cpc	r27, r23
    1b8a:	10 f0       	brcs	.+4      	; 0x1b90 <__udivmodhi4_ep>
    1b8c:	a6 1b       	sub	r26, r22
    1b8e:	b7 0b       	sbc	r27, r23

00001b90 <__udivmodhi4_ep>:
    1b90:	88 1f       	adc	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	5a 95       	dec	r21
    1b96:	a9 f7       	brne	.-22     	; 0x1b82 <__udivmodhi4_loop>
    1b98:	80 95       	com	r24
    1b9a:	90 95       	com	r25
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	08 95       	ret

00001ba2 <_exit>:
    1ba2:	f8 94       	cli

00001ba4 <__stop_program>:
    1ba4:	ff cf       	rjmp	.-2      	; 0x1ba4 <__stop_program>
